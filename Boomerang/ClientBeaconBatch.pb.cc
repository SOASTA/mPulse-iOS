// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientBeaconBatch.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ClientBeaconBatch.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace client_beacon_batch {

void protobuf_ShutdownFile_ClientBeaconBatch_2eproto() {
  delete ClientBeaconBatch::default_instance_;
  delete ClientBeaconBatch_ClientBeaconBatchRecord::default_instance_;
  delete ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::default_instance_;
  delete ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::default_instance_;
  delete ClientBeaconBatch_ClientBeaconRecord::default_instance_;
  delete ClientBeaconBatch_ClientBeaconRecord_ApiNetworkRequestData::default_instance_;
  delete ClientBeaconBatch_ClientBeaconRecord_ApiCustomTimerData::default_instance_;
  delete ClientBeaconBatch_ClientBeaconRecord_ApiCustomMetricData::default_instance_;
  delete ClientBeaconBatch_ClientBeaconRecord_AppLaunchData::default_instance_;
  delete ClientBeaconBatch_ClientBeaconRecord_AppInactiveData::default_instance_;
  delete ClientBeaconBatch_ClientBeaconRecord_AppEventClickData::default_instance_;
  delete ClientBeaconBatch_ClientBeaconRecord_AppEventNetworkData::default_instance_;
  delete ClientBeaconBatch_ClientBeaconRecord_AppEventLogData::default_instance_;
  delete ClientBeaconBatch_ClientBeaconRecord_AppEventData::default_instance_;
  delete ClientBeaconBatch_ClientBeaconRecord_AppErrorFrameData::default_instance_;
  delete ClientBeaconBatch_ClientBeaconRecord_AppErrorData::default_instance_;
  delete ClientBeaconBatch_SessionInfo::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_ClientBeaconBatch_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_ClientBeaconBatch_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ClientBeaconBatch::default_instance_ = new ClientBeaconBatch();
  ClientBeaconBatch_ClientBeaconBatchRecord::default_instance_ = new ClientBeaconBatch_ClientBeaconBatchRecord();
  ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::default_instance_ = new ClientBeaconBatch_ClientBeaconBatchRecord_TimerData();
  ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::default_instance_ = new ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers();
  ClientBeaconBatch_ClientBeaconRecord::default_instance_ = new ClientBeaconBatch_ClientBeaconRecord();
  ClientBeaconBatch_ClientBeaconRecord_ApiNetworkRequestData::default_instance_ = new ClientBeaconBatch_ClientBeaconRecord_ApiNetworkRequestData();
  ClientBeaconBatch_ClientBeaconRecord_ApiCustomTimerData::default_instance_ = new ClientBeaconBatch_ClientBeaconRecord_ApiCustomTimerData();
  ClientBeaconBatch_ClientBeaconRecord_ApiCustomMetricData::default_instance_ = new ClientBeaconBatch_ClientBeaconRecord_ApiCustomMetricData();
  ClientBeaconBatch_ClientBeaconRecord_AppLaunchData::default_instance_ = new ClientBeaconBatch_ClientBeaconRecord_AppLaunchData();
  ClientBeaconBatch_ClientBeaconRecord_AppInactiveData::default_instance_ = new ClientBeaconBatch_ClientBeaconRecord_AppInactiveData();
  ClientBeaconBatch_ClientBeaconRecord_AppEventClickData::default_instance_ = new ClientBeaconBatch_ClientBeaconRecord_AppEventClickData();
  ClientBeaconBatch_ClientBeaconRecord_AppEventNetworkData::default_instance_ = new ClientBeaconBatch_ClientBeaconRecord_AppEventNetworkData();
  ClientBeaconBatch_ClientBeaconRecord_AppEventLogData::default_instance_ = new ClientBeaconBatch_ClientBeaconRecord_AppEventLogData();
  ClientBeaconBatch_ClientBeaconRecord_AppEventData::default_instance_ = new ClientBeaconBatch_ClientBeaconRecord_AppEventData();
  ClientBeaconBatch_ClientBeaconRecord_AppErrorFrameData::default_instance_ = new ClientBeaconBatch_ClientBeaconRecord_AppErrorFrameData();
  ClientBeaconBatch_ClientBeaconRecord_AppErrorData::default_instance_ = new ClientBeaconBatch_ClientBeaconRecord_AppErrorData();
  ClientBeaconBatch_SessionInfo::default_instance_ = new ClientBeaconBatch_SessionInfo();
  ClientBeaconBatch::default_instance_->InitAsDefaultInstance();
  ClientBeaconBatch_ClientBeaconBatchRecord::default_instance_->InitAsDefaultInstance();
  ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::default_instance_->InitAsDefaultInstance();
  ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::default_instance_->InitAsDefaultInstance();
  ClientBeaconBatch_ClientBeaconRecord::default_instance_->InitAsDefaultInstance();
  ClientBeaconBatch_ClientBeaconRecord_ApiNetworkRequestData::default_instance_->InitAsDefaultInstance();
  ClientBeaconBatch_ClientBeaconRecord_ApiCustomTimerData::default_instance_->InitAsDefaultInstance();
  ClientBeaconBatch_ClientBeaconRecord_ApiCustomMetricData::default_instance_->InitAsDefaultInstance();
  ClientBeaconBatch_ClientBeaconRecord_AppLaunchData::default_instance_->InitAsDefaultInstance();
  ClientBeaconBatch_ClientBeaconRecord_AppInactiveData::default_instance_->InitAsDefaultInstance();
  ClientBeaconBatch_ClientBeaconRecord_AppEventClickData::default_instance_->InitAsDefaultInstance();
  ClientBeaconBatch_ClientBeaconRecord_AppEventNetworkData::default_instance_->InitAsDefaultInstance();
  ClientBeaconBatch_ClientBeaconRecord_AppEventLogData::default_instance_->InitAsDefaultInstance();
  ClientBeaconBatch_ClientBeaconRecord_AppEventData::default_instance_->InitAsDefaultInstance();
  ClientBeaconBatch_ClientBeaconRecord_AppErrorFrameData::default_instance_->InitAsDefaultInstance();
  ClientBeaconBatch_ClientBeaconRecord_AppErrorData::default_instance_->InitAsDefaultInstance();
  ClientBeaconBatch_SessionInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ClientBeaconBatch_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_ClientBeaconBatch_2eproto_once_);
void protobuf_AddDesc_ClientBeaconBatch_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_ClientBeaconBatch_2eproto_once_,
                 &protobuf_AddDesc_ClientBeaconBatch_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ClientBeaconBatch_2eproto {
  StaticDescriptorInitializer_ClientBeaconBatch_2eproto() {
    protobuf_AddDesc_ClientBeaconBatch_2eproto();
  }
} static_descriptor_initializer_ClientBeaconBatch_2eproto_;
#endif

// ===================================================================

bool ClientBeaconBatch_BeaconType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ClientBeaconBatch_BeaconType ClientBeaconBatch::PAGE_VIEW;
const ClientBeaconBatch_BeaconType ClientBeaconBatch::MANUAL;
const ClientBeaconBatch_BeaconType ClientBeaconBatch::SPA;
const ClientBeaconBatch_BeaconType ClientBeaconBatch::SPA_HARD;
const ClientBeaconBatch_BeaconType ClientBeaconBatch::XHR;
const ClientBeaconBatch_BeaconType ClientBeaconBatch::CLICK;
const ClientBeaconBatch_BeaconType ClientBeaconBatch::API;
const ClientBeaconBatch_BeaconType ClientBeaconBatch::API_NETWORK_REQUEST;
const ClientBeaconBatch_BeaconType ClientBeaconBatch::API_CUSTOM_METRIC;
const ClientBeaconBatch_BeaconType ClientBeaconBatch::API_CUSTOM_TIMER;
const ClientBeaconBatch_BeaconType ClientBeaconBatch::APP_LAUNCH;
const ClientBeaconBatch_BeaconType ClientBeaconBatch::APP_INACTIVE;
const ClientBeaconBatch_BeaconType ClientBeaconBatch::APP_ERROR;
const ClientBeaconBatch_BeaconType ClientBeaconBatch::BATCH;
const ClientBeaconBatch_BeaconType ClientBeaconBatch::BeaconType_MIN;
const ClientBeaconBatch_BeaconType ClientBeaconBatch::BeaconType_MAX;
const int ClientBeaconBatch::BeaconType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::kTotalFieldNumber;
const int ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::kMinFieldNumber;
const int ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::kMaxFieldNumber;
const int ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::kSumFieldNumber;
const int ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::kSumSqFieldNumber;
const int ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::kHistogramFieldNumber;
#endif  // !_MSC_VER

ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.TimerData)
}

void ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::InitAsDefaultInstance() {
}

ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData(const ClientBeaconBatch_ClientBeaconBatchRecord_TimerData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.TimerData)
}

void ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  total_ = 0;
  min_ = 0;
  max_ = 0;
  sum_ = GOOGLE_LONGLONG(0);
  sum_sq_ = GOOGLE_LONGLONG(0);
  histogram_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::~ClientBeaconBatch_ClientBeaconBatchRecord_TimerData() {
  // @@protoc_insertion_point(destructor:client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.TimerData)
  SharedDtor();
}

void ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::SharedDtor() {
  if (histogram_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete histogram_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClientBeaconBatch_ClientBeaconBatchRecord_TimerData& ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ClientBeaconBatch_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ClientBeaconBatch_2eproto();
#endif
  return *default_instance_;
}

ClientBeaconBatch_ClientBeaconBatchRecord_TimerData* ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::default_instance_ = NULL;

ClientBeaconBatch_ClientBeaconBatchRecord_TimerData* ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::New() const {
  return new ClientBeaconBatch_ClientBeaconBatchRecord_TimerData;
}

void ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClientBeaconBatch_ClientBeaconBatchRecord_TimerData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(total_, sum_sq_);
    max_ = 0;
    if (has_histogram()) {
      if (histogram_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        histogram_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.TimerData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 total = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_)));
          set_has_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_min;
        break;
      }

      // optional int32 min = 2;
      case 2: {
        if (tag == 16) {
         parse_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_)));
          set_has_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_max;
        break;
      }

      // optional int32 max = 3;
      case 3: {
        if (tag == 24) {
         parse_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_)));
          set_has_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sum;
        break;
      }

      // optional int64 sum = 4;
      case 4: {
        if (tag == 32) {
         parse_sum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sum_)));
          set_has_sum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sum_sq;
        break;
      }

      // optional int64 sum_sq = 5;
      case 5: {
        if (tag == 40) {
         parse_sum_sq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sum_sq_)));
          set_has_sum_sq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_histogram;
        break;
      }

      // optional bytes histogram = 6;
      case 6: {
        if (tag == 50) {
         parse_histogram:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_histogram()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.TimerData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.TimerData)
  return false;
#undef DO_
}

void ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.TimerData)
  // optional int32 total = 1;
  if (has_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->total(), output);
  }

  // optional int32 min = 2;
  if (has_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->min(), output);
  }

  // optional int32 max = 3;
  if (has_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max(), output);
  }

  // optional int64 sum = 4;
  if (has_sum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->sum(), output);
  }

  // optional int64 sum_sq = 5;
  if (has_sum_sq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->sum_sq(), output);
  }

  // optional bytes histogram = 6;
  if (has_histogram()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->histogram(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.TimerData)
}

int ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 total = 1;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total());
    }

    // optional int32 min = 2;
    if (has_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min());
    }

    // optional int32 max = 3;
    if (has_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max());
    }

    // optional int64 sum = 4;
    if (has_sum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sum());
    }

    // optional int64 sum_sq = 5;
    if (has_sum_sq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sum_sq());
    }

    // optional bytes histogram = 6;
    if (has_histogram()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->histogram());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClientBeaconBatch_ClientBeaconBatchRecord_TimerData*>(&from));
}

void ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::MergeFrom(const ClientBeaconBatch_ClientBeaconBatchRecord_TimerData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total()) {
      set_total(from.total());
    }
    if (from.has_min()) {
      set_min(from.min());
    }
    if (from.has_max()) {
      set_max(from.max());
    }
    if (from.has_sum()) {
      set_sum(from.sum());
    }
    if (from.has_sum_sq()) {
      set_sum_sq(from.sum_sq());
    }
    if (from.has_histogram()) {
      set_histogram(from.histogram());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::CopyFrom(const ClientBeaconBatch_ClientBeaconBatchRecord_TimerData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::IsInitialized() const {

  return true;
}

void ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::Swap(ClientBeaconBatch_ClientBeaconBatchRecord_TimerData* other) {
  if (other != this) {
    std::swap(total_, other->total_);
    std::swap(min_, other->min_);
    std::swap(max_, other->max_);
    std::swap(sum_, other->sum_);
    std::swap(sum_sq_, other->sum_sq_);
    std::swap(histogram_, other->histogram_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::GetTypeName() const {
  return "client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.TimerData";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::kRequestDurationTimerFieldNumber;
const int ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::kDnsTimerFieldNumber;
const int ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::kTcpTimerFieldNumber;
const int ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::kSslTimerFieldNumber;
const int ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::kTimeToFirstByteTimerFieldNumber;
const int ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::kTimeToLastByteTimerFieldNumber;
#endif  // !_MSC_VER

ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.NetworkTimers)
}

void ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  request_duration_timer_ = const_cast< ::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData*>(
      ::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::internal_default_instance());
#else
  request_duration_timer_ = const_cast< ::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData*>(&::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  dns_timer_ = const_cast< ::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData*>(
      ::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::internal_default_instance());
#else
  dns_timer_ = const_cast< ::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData*>(&::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  tcp_timer_ = const_cast< ::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData*>(
      ::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::internal_default_instance());
#else
  tcp_timer_ = const_cast< ::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData*>(&::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  ssl_timer_ = const_cast< ::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData*>(
      ::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::internal_default_instance());
#else
  ssl_timer_ = const_cast< ::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData*>(&::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  time_to_first_byte_timer_ = const_cast< ::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData*>(
      ::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::internal_default_instance());
#else
  time_to_first_byte_timer_ = const_cast< ::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData*>(&::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  time_to_last_byte_timer_ = const_cast< ::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData*>(
      ::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::internal_default_instance());
#else
  time_to_last_byte_timer_ = const_cast< ::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData*>(&::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::default_instance());
#endif
}

ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers(const ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.NetworkTimers)
}

void ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::SharedCtor() {
  _cached_size_ = 0;
  request_duration_timer_ = NULL;
  dns_timer_ = NULL;
  tcp_timer_ = NULL;
  ssl_timer_ = NULL;
  time_to_first_byte_timer_ = NULL;
  time_to_last_byte_timer_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::~ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers() {
  // @@protoc_insertion_point(destructor:client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.NetworkTimers)
  SharedDtor();
}

void ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete request_duration_timer_;
    delete dns_timer_;
    delete tcp_timer_;
    delete ssl_timer_;
    delete time_to_first_byte_timer_;
    delete time_to_last_byte_timer_;
  }
}

void ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers& ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ClientBeaconBatch_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ClientBeaconBatch_2eproto();
#endif
  return *default_instance_;
}

ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers* ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::default_instance_ = NULL;

ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers* ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::New() const {
  return new ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers;
}

void ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_request_duration_timer()) {
      if (request_duration_timer_ != NULL) request_duration_timer_->::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::Clear();
    }
    if (has_dns_timer()) {
      if (dns_timer_ != NULL) dns_timer_->::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::Clear();
    }
    if (has_tcp_timer()) {
      if (tcp_timer_ != NULL) tcp_timer_->::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::Clear();
    }
    if (has_ssl_timer()) {
      if (ssl_timer_ != NULL) ssl_timer_->::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::Clear();
    }
    if (has_time_to_first_byte_timer()) {
      if (time_to_first_byte_timer_ != NULL) time_to_first_byte_timer_->::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::Clear();
    }
    if (has_time_to_last_byte_timer()) {
      if (time_to_last_byte_timer_ != NULL) time_to_last_byte_timer_->::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.NetworkTimers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.TimerData request_duration_timer = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request_duration_timer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_dns_timer;
        break;
      }

      // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.TimerData dns_timer = 2;
      case 2: {
        if (tag == 18) {
         parse_dns_timer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dns_timer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tcp_timer;
        break;
      }

      // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.TimerData tcp_timer = 3;
      case 3: {
        if (tag == 26) {
         parse_tcp_timer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tcp_timer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ssl_timer;
        break;
      }

      // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.TimerData ssl_timer = 4;
      case 4: {
        if (tag == 34) {
         parse_ssl_timer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ssl_timer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_time_to_first_byte_timer;
        break;
      }

      // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.TimerData time_to_first_byte_timer = 5;
      case 5: {
        if (tag == 42) {
         parse_time_to_first_byte_timer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time_to_first_byte_timer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_time_to_last_byte_timer;
        break;
      }

      // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.TimerData time_to_last_byte_timer = 6;
      case 6: {
        if (tag == 50) {
         parse_time_to_last_byte_timer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time_to_last_byte_timer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.NetworkTimers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.NetworkTimers)
  return false;
#undef DO_
}

void ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.NetworkTimers)
  // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.TimerData request_duration_timer = 1;
  if (has_request_duration_timer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->request_duration_timer(), output);
  }

  // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.TimerData dns_timer = 2;
  if (has_dns_timer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->dns_timer(), output);
  }

  // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.TimerData tcp_timer = 3;
  if (has_tcp_timer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->tcp_timer(), output);
  }

  // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.TimerData ssl_timer = 4;
  if (has_ssl_timer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->ssl_timer(), output);
  }

  // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.TimerData time_to_first_byte_timer = 5;
  if (has_time_to_first_byte_timer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->time_to_first_byte_timer(), output);
  }

  // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.TimerData time_to_last_byte_timer = 6;
  if (has_time_to_last_byte_timer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->time_to_last_byte_timer(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.NetworkTimers)
}

int ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.TimerData request_duration_timer = 1;
    if (has_request_duration_timer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request_duration_timer());
    }

    // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.TimerData dns_timer = 2;
    if (has_dns_timer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dns_timer());
    }

    // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.TimerData tcp_timer = 3;
    if (has_tcp_timer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tcp_timer());
    }

    // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.TimerData ssl_timer = 4;
    if (has_ssl_timer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ssl_timer());
    }

    // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.TimerData time_to_first_byte_timer = 5;
    if (has_time_to_first_byte_timer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->time_to_first_byte_timer());
    }

    // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.TimerData time_to_last_byte_timer = 6;
    if (has_time_to_last_byte_timer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->time_to_last_byte_timer());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers*>(&from));
}

void ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::MergeFrom(const ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_duration_timer()) {
      mutable_request_duration_timer()->::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::MergeFrom(from.request_duration_timer());
    }
    if (from.has_dns_timer()) {
      mutable_dns_timer()->::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::MergeFrom(from.dns_timer());
    }
    if (from.has_tcp_timer()) {
      mutable_tcp_timer()->::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::MergeFrom(from.tcp_timer());
    }
    if (from.has_ssl_timer()) {
      mutable_ssl_timer()->::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::MergeFrom(from.ssl_timer());
    }
    if (from.has_time_to_first_byte_timer()) {
      mutable_time_to_first_byte_timer()->::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::MergeFrom(from.time_to_first_byte_timer());
    }
    if (from.has_time_to_last_byte_timer()) {
      mutable_time_to_last_byte_timer()->::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::MergeFrom(from.time_to_last_byte_timer());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::CopyFrom(const ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::IsInitialized() const {

  return true;
}

void ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::Swap(ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers* other) {
  if (other != this) {
    std::swap(request_duration_timer_, other->request_duration_timer_);
    std::swap(dns_timer_, other->dns_timer_);
    std::swap(tcp_timer_, other->tcp_timer_);
    std::swap(ssl_timer_, other->ssl_timer_);
    std::swap(time_to_first_byte_timer_, other->time_to_first_byte_timer_);
    std::swap(time_to_last_byte_timer_, other->time_to_last_byte_timer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::GetTypeName() const {
  return "client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.NetworkTimers";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ClientBeaconBatch_ClientBeaconBatchRecord::kPageGroupFieldNumber;
const int ClientBeaconBatch_ClientBeaconBatchRecord::kAbTestFieldNumber;
const int ClientBeaconBatch_ClientBeaconBatchRecord::kUrlFieldNumber;
const int ClientBeaconBatch_ClientBeaconBatchRecord::kNetworkErrorCodeFieldNumber;
const int ClientBeaconBatch_ClientBeaconBatchRecord::kTimestampFieldNumber;
const int ClientBeaconBatch_ClientBeaconBatchRecord::kNetworkTimersFieldNumber;
const int ClientBeaconBatch_ClientBeaconBatchRecord::kCustomTimersFieldNumber;
const int ClientBeaconBatch_ClientBeaconBatchRecord::kCustomMetricsFieldNumber;
const int ClientBeaconBatch_ClientBeaconBatchRecord::kBeaconTotalFieldNumber;
const int ClientBeaconBatch_ClientBeaconBatchRecord::kCrashesTotalFieldNumber;
const int ClientBeaconBatch_ClientBeaconBatchRecord::kInstallsTotalFieldNumber;
const int ClientBeaconBatch_ClientBeaconBatchRecord::kCustomDimensionsFieldNumber;
const int ClientBeaconBatch_ClientBeaconBatchRecord::kBeaconTypeFieldNumber;
#endif  // !_MSC_VER

ClientBeaconBatch_ClientBeaconBatchRecord::ClientBeaconBatch_ClientBeaconBatchRecord()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord)
}

void ClientBeaconBatch_ClientBeaconBatchRecord::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  network_timers_ = const_cast< ::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers*>(
      ::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::internal_default_instance());
#else
  network_timers_ = const_cast< ::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers*>(&::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::default_instance());
#endif
}

ClientBeaconBatch_ClientBeaconBatchRecord::ClientBeaconBatch_ClientBeaconBatchRecord(const ClientBeaconBatch_ClientBeaconBatchRecord& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord)
}

void ClientBeaconBatch_ClientBeaconBatchRecord::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  page_group_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ab_test_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  network_error_code_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  network_timers_ = NULL;
  beacon_total_ = 0;
  crashes_total_ = 0;
  installs_total_ = 0;
  beacon_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientBeaconBatch_ClientBeaconBatchRecord::~ClientBeaconBatch_ClientBeaconBatchRecord() {
  // @@protoc_insertion_point(destructor:client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord)
  SharedDtor();
}

void ClientBeaconBatch_ClientBeaconBatchRecord::SharedDtor() {
  if (page_group_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete page_group_;
  }
  if (ab_test_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ab_test_;
  }
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (beacon_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete beacon_type_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete network_timers_;
  }
}

void ClientBeaconBatch_ClientBeaconBatchRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClientBeaconBatch_ClientBeaconBatchRecord& ClientBeaconBatch_ClientBeaconBatchRecord::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ClientBeaconBatch_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ClientBeaconBatch_2eproto();
#endif
  return *default_instance_;
}

ClientBeaconBatch_ClientBeaconBatchRecord* ClientBeaconBatch_ClientBeaconBatchRecord::default_instance_ = NULL;

ClientBeaconBatch_ClientBeaconBatchRecord* ClientBeaconBatch_ClientBeaconBatchRecord::New() const {
  return new ClientBeaconBatch_ClientBeaconBatchRecord;
}

void ClientBeaconBatch_ClientBeaconBatchRecord::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClientBeaconBatch_ClientBeaconBatchRecord*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    if (has_page_group()) {
      if (page_group_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        page_group_->clear();
      }
    }
    if (has_ab_test()) {
      if (ab_test_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ab_test_->clear();
      }
    }
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        url_->clear();
      }
    }
    network_error_code_ = 0;
    timestamp_ = GOOGLE_LONGLONG(0);
    if (has_network_timers()) {
      if (network_timers_ != NULL) network_timers_->::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 5888) {
    ZR_(crashes_total_, installs_total_);
    beacon_total_ = 0;
    if (has_beacon_type()) {
      if (beacon_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        beacon_type_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  custom_timers_.Clear();
  custom_metrics_.Clear();
  custom_dimensions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ClientBeaconBatch_ClientBeaconBatchRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string page_group = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_group()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ab_test;
        break;
      }

      // optional string ab_test = 2;
      case 2: {
        if (tag == 18) {
         parse_ab_test:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ab_test()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_url;
        break;
      }

      // optional string url = 3;
      case 3: {
        if (tag == 26) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_network_error_code;
        break;
      }

      // optional int32 network_error_code = 4;
      case 4: {
        if (tag == 32) {
         parse_network_error_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &network_error_code_)));
          set_has_network_error_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_timestamp;
        break;
      }

      // optional int64 timestamp = 5;
      case 5: {
        if (tag == 40) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_network_timers;
        break;
      }

      // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.NetworkTimers network_timers = 6;
      case 6: {
        if (tag == 50) {
         parse_network_timers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_network_timers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_custom_timers;
        break;
      }

      // repeated .client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.TimerData custom_timers = 7;
      case 7: {
        if (tag == 58) {
         parse_custom_timers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_custom_timers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_custom_timers;
        if (input->ExpectTag(64)) goto parse_custom_metrics;
        break;
      }

      // repeated int64 custom_metrics = 8;
      case 8: {
        if (tag == 64) {
         parse_custom_metrics:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 64, input, this->mutable_custom_metrics())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_custom_metrics())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_custom_metrics;
        if (input->ExpectTag(72)) goto parse_beacon_total;
        break;
      }

      // optional int32 beacon_total = 9;
      case 9: {
        if (tag == 72) {
         parse_beacon_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &beacon_total_)));
          set_has_beacon_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_crashes_total;
        break;
      }

      // optional int32 crashes_total = 10;
      case 10: {
        if (tag == 80) {
         parse_crashes_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crashes_total_)));
          set_has_crashes_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_installs_total;
        break;
      }

      // optional int32 installs_total = 11;
      case 11: {
        if (tag == 88) {
         parse_installs_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &installs_total_)));
          set_has_installs_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_custom_dimensions;
        break;
      }

      // repeated string custom_dimensions = 12;
      case 12: {
        if (tag == 98) {
         parse_custom_dimensions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_custom_dimensions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_custom_dimensions;
        if (input->ExpectTag(106)) goto parse_beacon_type;
        break;
      }

      // optional string beacon_type = 13;
      case 13: {
        if (tag == 106) {
         parse_beacon_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_beacon_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord)
  return false;
#undef DO_
}

void ClientBeaconBatch_ClientBeaconBatchRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord)
  // optional string page_group = 1;
  if (has_page_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->page_group(), output);
  }

  // optional string ab_test = 2;
  if (has_ab_test()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ab_test(), output);
  }

  // optional string url = 3;
  if (has_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->url(), output);
  }

  // optional int32 network_error_code = 4;
  if (has_network_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->network_error_code(), output);
  }

  // optional int64 timestamp = 5;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->timestamp(), output);
  }

  // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.NetworkTimers network_timers = 6;
  if (has_network_timers()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->network_timers(), output);
  }

  // repeated .client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.TimerData custom_timers = 7;
  for (int i = 0; i < this->custom_timers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->custom_timers(i), output);
  }

  // repeated int64 custom_metrics = 8;
  for (int i = 0; i < this->custom_metrics_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      8, this->custom_metrics(i), output);
  }

  // optional int32 beacon_total = 9;
  if (has_beacon_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->beacon_total(), output);
  }

  // optional int32 crashes_total = 10;
  if (has_crashes_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->crashes_total(), output);
  }

  // optional int32 installs_total = 11;
  if (has_installs_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->installs_total(), output);
  }

  // repeated string custom_dimensions = 12;
  for (int i = 0; i < this->custom_dimensions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->custom_dimensions(i), output);
  }

  // optional string beacon_type = 13;
  if (has_beacon_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->beacon_type(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord)
}

int ClientBeaconBatch_ClientBeaconBatchRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string page_group = 1;
    if (has_page_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->page_group());
    }

    // optional string ab_test = 2;
    if (has_ab_test()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ab_test());
    }

    // optional string url = 3;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional int32 network_error_code = 4;
    if (has_network_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->network_error_code());
    }

    // optional int64 timestamp = 5;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.NetworkTimers network_timers = 6;
    if (has_network_timers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->network_timers());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 beacon_total = 9;
    if (has_beacon_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->beacon_total());
    }

    // optional int32 crashes_total = 10;
    if (has_crashes_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->crashes_total());
    }

    // optional int32 installs_total = 11;
    if (has_installs_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->installs_total());
    }

    // optional string beacon_type = 13;
    if (has_beacon_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->beacon_type());
    }

  }
  // repeated .client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.TimerData custom_timers = 7;
  total_size += 1 * this->custom_timers_size();
  for (int i = 0; i < this->custom_timers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->custom_timers(i));
  }

  // repeated int64 custom_metrics = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->custom_metrics_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->custom_metrics(i));
    }
    total_size += 1 * this->custom_metrics_size() + data_size;
  }

  // repeated string custom_dimensions = 12;
  total_size += 1 * this->custom_dimensions_size();
  for (int i = 0; i < this->custom_dimensions_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->custom_dimensions(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientBeaconBatch_ClientBeaconBatchRecord::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClientBeaconBatch_ClientBeaconBatchRecord*>(&from));
}

void ClientBeaconBatch_ClientBeaconBatchRecord::MergeFrom(const ClientBeaconBatch_ClientBeaconBatchRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  custom_timers_.MergeFrom(from.custom_timers_);
  custom_metrics_.MergeFrom(from.custom_metrics_);
  custom_dimensions_.MergeFrom(from.custom_dimensions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_page_group()) {
      set_page_group(from.page_group());
    }
    if (from.has_ab_test()) {
      set_ab_test(from.ab_test());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_network_error_code()) {
      set_network_error_code(from.network_error_code());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_network_timers()) {
      mutable_network_timers()->::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::MergeFrom(from.network_timers());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_beacon_total()) {
      set_beacon_total(from.beacon_total());
    }
    if (from.has_crashes_total()) {
      set_crashes_total(from.crashes_total());
    }
    if (from.has_installs_total()) {
      set_installs_total(from.installs_total());
    }
    if (from.has_beacon_type()) {
      set_beacon_type(from.beacon_type());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ClientBeaconBatch_ClientBeaconBatchRecord::CopyFrom(const ClientBeaconBatch_ClientBeaconBatchRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientBeaconBatch_ClientBeaconBatchRecord::IsInitialized() const {

  return true;
}

void ClientBeaconBatch_ClientBeaconBatchRecord::Swap(ClientBeaconBatch_ClientBeaconBatchRecord* other) {
  if (other != this) {
    std::swap(page_group_, other->page_group_);
    std::swap(ab_test_, other->ab_test_);
    std::swap(url_, other->url_);
    std::swap(network_error_code_, other->network_error_code_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(network_timers_, other->network_timers_);
    custom_timers_.Swap(&other->custom_timers_);
    custom_metrics_.Swap(&other->custom_metrics_);
    std::swap(beacon_total_, other->beacon_total_);
    std::swap(crashes_total_, other->crashes_total_);
    std::swap(installs_total_, other->installs_total_);
    custom_dimensions_.Swap(&other->custom_dimensions_);
    std::swap(beacon_type_, other->beacon_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ClientBeaconBatch_ClientBeaconBatchRecord::GetTypeName() const {
  return "client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord";
}


// -------------------------------------------------------------------

bool ClientBeaconBatch_ClientBeaconRecord_AppEventType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ClientBeaconBatch_ClientBeaconRecord_AppEventType ClientBeaconBatch_ClientBeaconRecord::EVENT_CLICK;
const ClientBeaconBatch_ClientBeaconRecord_AppEventType ClientBeaconBatch_ClientBeaconRecord::EVENT_NETWORK;
const ClientBeaconBatch_ClientBeaconRecord_AppEventType ClientBeaconBatch_ClientBeaconRecord::EVENT_LOG;
const ClientBeaconBatch_ClientBeaconRecord_AppEventType ClientBeaconBatch_ClientBeaconRecord::AppEventType_MIN;
const ClientBeaconBatch_ClientBeaconRecord_AppEventType ClientBeaconBatch_ClientBeaconRecord::AppEventType_MAX;
const int ClientBeaconBatch_ClientBeaconRecord::AppEventType_ARRAYSIZE;
#endif  // _MSC_VER
bool ClientBeaconBatch_ClientBeaconRecord_AppEventNetworkMethodType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ClientBeaconBatch_ClientBeaconRecord_AppEventNetworkMethodType ClientBeaconBatch_ClientBeaconRecord::METHOD_GET;
const ClientBeaconBatch_ClientBeaconRecord_AppEventNetworkMethodType ClientBeaconBatch_ClientBeaconRecord::METHOD_HEAD;
const ClientBeaconBatch_ClientBeaconRecord_AppEventNetworkMethodType ClientBeaconBatch_ClientBeaconRecord::METHOD_POST;
const ClientBeaconBatch_ClientBeaconRecord_AppEventNetworkMethodType ClientBeaconBatch_ClientBeaconRecord::METHOD_PUT;
const ClientBeaconBatch_ClientBeaconRecord_AppEventNetworkMethodType ClientBeaconBatch_ClientBeaconRecord::METHOD_DELETE;
const ClientBeaconBatch_ClientBeaconRecord_AppEventNetworkMethodType ClientBeaconBatch_ClientBeaconRecord::METHOD_TRACE;
const ClientBeaconBatch_ClientBeaconRecord_AppEventNetworkMethodType ClientBeaconBatch_ClientBeaconRecord::METHOD_OPTIONS;
const ClientBeaconBatch_ClientBeaconRecord_AppEventNetworkMethodType ClientBeaconBatch_ClientBeaconRecord::AppEventNetworkMethodType_MIN;
const ClientBeaconBatch_ClientBeaconRecord_AppEventNetworkMethodType ClientBeaconBatch_ClientBeaconRecord::AppEventNetworkMethodType_MAX;
const int ClientBeaconBatch_ClientBeaconRecord::AppEventNetworkMethodType_ARRAYSIZE;
#endif  // _MSC_VER
bool ClientBeaconBatch_ClientBeaconRecord_AppEventLogSeverityType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ClientBeaconBatch_ClientBeaconRecord_AppEventLogSeverityType ClientBeaconBatch_ClientBeaconRecord::SEVERITY_DEBUG;
const ClientBeaconBatch_ClientBeaconRecord_AppEventLogSeverityType ClientBeaconBatch_ClientBeaconRecord::SEVERITY_INFO;
const ClientBeaconBatch_ClientBeaconRecord_AppEventLogSeverityType ClientBeaconBatch_ClientBeaconRecord::SEVERITY_WARN;
const ClientBeaconBatch_ClientBeaconRecord_AppEventLogSeverityType ClientBeaconBatch_ClientBeaconRecord::SEVERITY_ERROR;
const ClientBeaconBatch_ClientBeaconRecord_AppEventLogSeverityType ClientBeaconBatch_ClientBeaconRecord::SEVERITY_CRITICAL;
const ClientBeaconBatch_ClientBeaconRecord_AppEventLogSeverityType ClientBeaconBatch_ClientBeaconRecord::AppEventLogSeverityType_MIN;
const ClientBeaconBatch_ClientBeaconRecord_AppEventLogSeverityType ClientBeaconBatch_ClientBeaconRecord::AppEventLogSeverityType_MAX;
const int ClientBeaconBatch_ClientBeaconRecord::AppEventLogSeverityType_ARRAYSIZE;
#endif  // _MSC_VER
bool ClientBeaconBatch_ClientBeaconRecord_AppErrorSourceType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ClientBeaconBatch_ClientBeaconRecord_AppErrorSourceType ClientBeaconBatch_ClientBeaconRecord::SOURCE_APP;
const ClientBeaconBatch_ClientBeaconRecord_AppErrorSourceType ClientBeaconBatch_ClientBeaconRecord::SOURCE_BOOMERANG;
const ClientBeaconBatch_ClientBeaconRecord_AppErrorSourceType ClientBeaconBatch_ClientBeaconRecord::AppErrorSourceType_MIN;
const ClientBeaconBatch_ClientBeaconRecord_AppErrorSourceType ClientBeaconBatch_ClientBeaconRecord::AppErrorSourceType_MAX;
const int ClientBeaconBatch_ClientBeaconRecord::AppErrorSourceType_ARRAYSIZE;
#endif  // _MSC_VER
bool ClientBeaconBatch_ClientBeaconRecord_AppErrorViaType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ClientBeaconBatch_ClientBeaconRecord_AppErrorViaType ClientBeaconBatch_ClientBeaconRecord::VIA_APP;
const ClientBeaconBatch_ClientBeaconRecord_AppErrorViaType ClientBeaconBatch_ClientBeaconRecord::VIA_GLOBAL_EXCEPTION_HANDLER;
const ClientBeaconBatch_ClientBeaconRecord_AppErrorViaType ClientBeaconBatch_ClientBeaconRecord::VIA_NETWORK;
const ClientBeaconBatch_ClientBeaconRecord_AppErrorViaType ClientBeaconBatch_ClientBeaconRecord::VIA_CONSOLE;
const ClientBeaconBatch_ClientBeaconRecord_AppErrorViaType ClientBeaconBatch_ClientBeaconRecord::VIA_EVENTHANDLER;
const ClientBeaconBatch_ClientBeaconRecord_AppErrorViaType ClientBeaconBatch_ClientBeaconRecord::VIA_TIMEOUT;
const ClientBeaconBatch_ClientBeaconRecord_AppErrorViaType ClientBeaconBatch_ClientBeaconRecord::AppErrorViaType_MIN;
const ClientBeaconBatch_ClientBeaconRecord_AppErrorViaType ClientBeaconBatch_ClientBeaconRecord::AppErrorViaType_MAX;
const int ClientBeaconBatch_ClientBeaconRecord::AppErrorViaType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ClientBeaconBatch_ClientBeaconRecord_ApiNetworkRequestData::kDurationFieldNumber;
const int ClientBeaconBatch_ClientBeaconRecord_ApiNetworkRequestData::kUrlFieldNumber;
const int ClientBeaconBatch_ClientBeaconRecord_ApiNetworkRequestData::kNetworkErrorCodeFieldNumber;
const int ClientBeaconBatch_ClientBeaconRecord_ApiNetworkRequestData::kDnsFieldNumber;
const int ClientBeaconBatch_ClientBeaconRecord_ApiNetworkRequestData::kTcpFieldNumber;
const int ClientBeaconBatch_ClientBeaconRecord_ApiNetworkRequestData::kSslFieldNumber;
const int ClientBeaconBatch_ClientBeaconRecord_ApiNetworkRequestData::kTtfbFieldNumber;
#endif  // !_MSC_VER

ClientBeaconBatch_ClientBeaconRecord_ApiNetworkRequestData::ClientBeaconBatch_ClientBeaconRecord_ApiNetworkRequestData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.ApiNetworkRequestData)
}

void ClientBeaconBatch_ClientBeaconRecord_ApiNetworkRequestData::InitAsDefaultInstance() {
}

ClientBeaconBatch_ClientBeaconRecord_ApiNetworkRequestData::ClientBeaconBatch_ClientBeaconRecord_ApiNetworkRequestData(const ClientBeaconBatch_ClientBeaconRecord_ApiNetworkRequestData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.ApiNetworkRequestData)
}

void ClientBeaconBatch_ClientBeaconRecord_ApiNetworkRequestData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  duration_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  network_error_code_ = 0;
  dns_ = 0;
  tcp_ = 0;
  ssl_ = 0;
  ttfb_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientBeaconBatch_ClientBeaconRecord_ApiNetworkRequestData::~ClientBeaconBatch_ClientBeaconRecord_ApiNetworkRequestData() {
  // @@protoc_insertion_point(destructor:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.ApiNetworkRequestData)
  SharedDtor();
}

void ClientBeaconBatch_ClientBeaconRecord_ApiNetworkRequestData::SharedDtor() {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ClientBeaconBatch_ClientBeaconRecord_ApiNetworkRequestData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClientBeaconBatch_ClientBeaconRecord_ApiNetworkRequestData& ClientBeaconBatch_ClientBeaconRecord_ApiNetworkRequestData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ClientBeaconBatch_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ClientBeaconBatch_2eproto();
#endif
  return *default_instance_;
}

ClientBeaconBatch_ClientBeaconRecord_ApiNetworkRequestData* ClientBeaconBatch_ClientBeaconRecord_ApiNetworkRequestData::default_instance_ = NULL;

ClientBeaconBatch_ClientBeaconRecord_ApiNetworkRequestData* ClientBeaconBatch_ClientBeaconRecord_ApiNetworkRequestData::New() const {
  return new ClientBeaconBatch_ClientBeaconRecord_ApiNetworkRequestData;
}

void ClientBeaconBatch_ClientBeaconRecord_ApiNetworkRequestData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClientBeaconBatch_ClientBeaconRecord_ApiNetworkRequestData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(duration_, ttfb_);
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        url_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ClientBeaconBatch_ClientBeaconRecord_ApiNetworkRequestData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.ApiNetworkRequestData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 duration = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_url;
        break;
      }

      // optional string url = 2;
      case 2: {
        if (tag == 18) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_network_error_code;
        break;
      }

      // optional int32 network_error_code = 3;
      case 3: {
        if (tag == 24) {
         parse_network_error_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &network_error_code_)));
          set_has_network_error_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dns;
        break;
      }

      // optional int32 dns = 4;
      case 4: {
        if (tag == 32) {
         parse_dns:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dns_)));
          set_has_dns();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_tcp;
        break;
      }

      // optional int32 tcp = 5;
      case 5: {
        if (tag == 40) {
         parse_tcp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tcp_)));
          set_has_tcp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ssl;
        break;
      }

      // optional int32 ssl = 6;
      case 6: {
        if (tag == 48) {
         parse_ssl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ssl_)));
          set_has_ssl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_ttfb;
        break;
      }

      // optional int32 ttfb = 7;
      case 7: {
        if (tag == 56) {
         parse_ttfb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ttfb_)));
          set_has_ttfb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.ApiNetworkRequestData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.ApiNetworkRequestData)
  return false;
#undef DO_
}

void ClientBeaconBatch_ClientBeaconRecord_ApiNetworkRequestData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.ApiNetworkRequestData)
  // optional int32 duration = 1;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->duration(), output);
  }

  // optional string url = 2;
  if (has_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  // optional int32 network_error_code = 3;
  if (has_network_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->network_error_code(), output);
  }

  // optional int32 dns = 4;
  if (has_dns()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dns(), output);
  }

  // optional int32 tcp = 5;
  if (has_tcp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->tcp(), output);
  }

  // optional int32 ssl = 6;
  if (has_ssl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ssl(), output);
  }

  // optional int32 ttfb = 7;
  if (has_ttfb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ttfb(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.ApiNetworkRequestData)
}

int ClientBeaconBatch_ClientBeaconRecord_ApiNetworkRequestData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 duration = 1;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duration());
    }

    // optional string url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional int32 network_error_code = 3;
    if (has_network_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->network_error_code());
    }

    // optional int32 dns = 4;
    if (has_dns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dns());
    }

    // optional int32 tcp = 5;
    if (has_tcp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tcp());
    }

    // optional int32 ssl = 6;
    if (has_ssl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ssl());
    }

    // optional int32 ttfb = 7;
    if (has_ttfb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ttfb());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientBeaconBatch_ClientBeaconRecord_ApiNetworkRequestData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClientBeaconBatch_ClientBeaconRecord_ApiNetworkRequestData*>(&from));
}

void ClientBeaconBatch_ClientBeaconRecord_ApiNetworkRequestData::MergeFrom(const ClientBeaconBatch_ClientBeaconRecord_ApiNetworkRequestData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_network_error_code()) {
      set_network_error_code(from.network_error_code());
    }
    if (from.has_dns()) {
      set_dns(from.dns());
    }
    if (from.has_tcp()) {
      set_tcp(from.tcp());
    }
    if (from.has_ssl()) {
      set_ssl(from.ssl());
    }
    if (from.has_ttfb()) {
      set_ttfb(from.ttfb());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ClientBeaconBatch_ClientBeaconRecord_ApiNetworkRequestData::CopyFrom(const ClientBeaconBatch_ClientBeaconRecord_ApiNetworkRequestData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientBeaconBatch_ClientBeaconRecord_ApiNetworkRequestData::IsInitialized() const {

  return true;
}

void ClientBeaconBatch_ClientBeaconRecord_ApiNetworkRequestData::Swap(ClientBeaconBatch_ClientBeaconRecord_ApiNetworkRequestData* other) {
  if (other != this) {
    std::swap(duration_, other->duration_);
    std::swap(url_, other->url_);
    std::swap(network_error_code_, other->network_error_code_);
    std::swap(dns_, other->dns_);
    std::swap(tcp_, other->tcp_);
    std::swap(ssl_, other->ssl_);
    std::swap(ttfb_, other->ttfb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ClientBeaconBatch_ClientBeaconRecord_ApiNetworkRequestData::GetTypeName() const {
  return "client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.ApiNetworkRequestData";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ClientBeaconBatch_ClientBeaconRecord_ApiCustomTimerData::kTimerValueFieldNumber;
const int ClientBeaconBatch_ClientBeaconRecord_ApiCustomTimerData::kTimerIndexFieldNumber;
#endif  // !_MSC_VER

ClientBeaconBatch_ClientBeaconRecord_ApiCustomTimerData::ClientBeaconBatch_ClientBeaconRecord_ApiCustomTimerData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.ApiCustomTimerData)
}

void ClientBeaconBatch_ClientBeaconRecord_ApiCustomTimerData::InitAsDefaultInstance() {
}

ClientBeaconBatch_ClientBeaconRecord_ApiCustomTimerData::ClientBeaconBatch_ClientBeaconRecord_ApiCustomTimerData(const ClientBeaconBatch_ClientBeaconRecord_ApiCustomTimerData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.ApiCustomTimerData)
}

void ClientBeaconBatch_ClientBeaconRecord_ApiCustomTimerData::SharedCtor() {
  _cached_size_ = 0;
  timer_value_ = 0;
  timer_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientBeaconBatch_ClientBeaconRecord_ApiCustomTimerData::~ClientBeaconBatch_ClientBeaconRecord_ApiCustomTimerData() {
  // @@protoc_insertion_point(destructor:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.ApiCustomTimerData)
  SharedDtor();
}

void ClientBeaconBatch_ClientBeaconRecord_ApiCustomTimerData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ClientBeaconBatch_ClientBeaconRecord_ApiCustomTimerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClientBeaconBatch_ClientBeaconRecord_ApiCustomTimerData& ClientBeaconBatch_ClientBeaconRecord_ApiCustomTimerData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ClientBeaconBatch_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ClientBeaconBatch_2eproto();
#endif
  return *default_instance_;
}

ClientBeaconBatch_ClientBeaconRecord_ApiCustomTimerData* ClientBeaconBatch_ClientBeaconRecord_ApiCustomTimerData::default_instance_ = NULL;

ClientBeaconBatch_ClientBeaconRecord_ApiCustomTimerData* ClientBeaconBatch_ClientBeaconRecord_ApiCustomTimerData::New() const {
  return new ClientBeaconBatch_ClientBeaconRecord_ApiCustomTimerData;
}

void ClientBeaconBatch_ClientBeaconRecord_ApiCustomTimerData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClientBeaconBatch_ClientBeaconRecord_ApiCustomTimerData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(timer_value_, timer_index_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ClientBeaconBatch_ClientBeaconRecord_ApiCustomTimerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.ApiCustomTimerData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 timer_value = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timer_value_)));
          set_has_timer_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_timer_index;
        break;
      }

      // optional int32 timer_index = 2;
      case 2: {
        if (tag == 16) {
         parse_timer_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timer_index_)));
          set_has_timer_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.ApiCustomTimerData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.ApiCustomTimerData)
  return false;
#undef DO_
}

void ClientBeaconBatch_ClientBeaconRecord_ApiCustomTimerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.ApiCustomTimerData)
  // optional int32 timer_value = 1;
  if (has_timer_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->timer_value(), output);
  }

  // optional int32 timer_index = 2;
  if (has_timer_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->timer_index(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.ApiCustomTimerData)
}

int ClientBeaconBatch_ClientBeaconRecord_ApiCustomTimerData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 timer_value = 1;
    if (has_timer_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timer_value());
    }

    // optional int32 timer_index = 2;
    if (has_timer_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timer_index());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientBeaconBatch_ClientBeaconRecord_ApiCustomTimerData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClientBeaconBatch_ClientBeaconRecord_ApiCustomTimerData*>(&from));
}

void ClientBeaconBatch_ClientBeaconRecord_ApiCustomTimerData::MergeFrom(const ClientBeaconBatch_ClientBeaconRecord_ApiCustomTimerData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timer_value()) {
      set_timer_value(from.timer_value());
    }
    if (from.has_timer_index()) {
      set_timer_index(from.timer_index());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ClientBeaconBatch_ClientBeaconRecord_ApiCustomTimerData::CopyFrom(const ClientBeaconBatch_ClientBeaconRecord_ApiCustomTimerData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientBeaconBatch_ClientBeaconRecord_ApiCustomTimerData::IsInitialized() const {

  return true;
}

void ClientBeaconBatch_ClientBeaconRecord_ApiCustomTimerData::Swap(ClientBeaconBatch_ClientBeaconRecord_ApiCustomTimerData* other) {
  if (other != this) {
    std::swap(timer_value_, other->timer_value_);
    std::swap(timer_index_, other->timer_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ClientBeaconBatch_ClientBeaconRecord_ApiCustomTimerData::GetTypeName() const {
  return "client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.ApiCustomTimerData";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ClientBeaconBatch_ClientBeaconRecord_ApiCustomMetricData::kMetricValueFieldNumber;
const int ClientBeaconBatch_ClientBeaconRecord_ApiCustomMetricData::kMetricIndexFieldNumber;
#endif  // !_MSC_VER

ClientBeaconBatch_ClientBeaconRecord_ApiCustomMetricData::ClientBeaconBatch_ClientBeaconRecord_ApiCustomMetricData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.ApiCustomMetricData)
}

void ClientBeaconBatch_ClientBeaconRecord_ApiCustomMetricData::InitAsDefaultInstance() {
}

ClientBeaconBatch_ClientBeaconRecord_ApiCustomMetricData::ClientBeaconBatch_ClientBeaconRecord_ApiCustomMetricData(const ClientBeaconBatch_ClientBeaconRecord_ApiCustomMetricData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.ApiCustomMetricData)
}

void ClientBeaconBatch_ClientBeaconRecord_ApiCustomMetricData::SharedCtor() {
  _cached_size_ = 0;
  metric_value_ = 0;
  metric_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientBeaconBatch_ClientBeaconRecord_ApiCustomMetricData::~ClientBeaconBatch_ClientBeaconRecord_ApiCustomMetricData() {
  // @@protoc_insertion_point(destructor:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.ApiCustomMetricData)
  SharedDtor();
}

void ClientBeaconBatch_ClientBeaconRecord_ApiCustomMetricData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ClientBeaconBatch_ClientBeaconRecord_ApiCustomMetricData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClientBeaconBatch_ClientBeaconRecord_ApiCustomMetricData& ClientBeaconBatch_ClientBeaconRecord_ApiCustomMetricData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ClientBeaconBatch_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ClientBeaconBatch_2eproto();
#endif
  return *default_instance_;
}

ClientBeaconBatch_ClientBeaconRecord_ApiCustomMetricData* ClientBeaconBatch_ClientBeaconRecord_ApiCustomMetricData::default_instance_ = NULL;

ClientBeaconBatch_ClientBeaconRecord_ApiCustomMetricData* ClientBeaconBatch_ClientBeaconRecord_ApiCustomMetricData::New() const {
  return new ClientBeaconBatch_ClientBeaconRecord_ApiCustomMetricData;
}

void ClientBeaconBatch_ClientBeaconRecord_ApiCustomMetricData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClientBeaconBatch_ClientBeaconRecord_ApiCustomMetricData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(metric_value_, metric_index_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ClientBeaconBatch_ClientBeaconRecord_ApiCustomMetricData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.ApiCustomMetricData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 metric_value = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &metric_value_)));
          set_has_metric_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_metric_index;
        break;
      }

      // optional int32 metric_index = 2;
      case 2: {
        if (tag == 16) {
         parse_metric_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &metric_index_)));
          set_has_metric_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.ApiCustomMetricData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.ApiCustomMetricData)
  return false;
#undef DO_
}

void ClientBeaconBatch_ClientBeaconRecord_ApiCustomMetricData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.ApiCustomMetricData)
  // optional int32 metric_value = 1;
  if (has_metric_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->metric_value(), output);
  }

  // optional int32 metric_index = 2;
  if (has_metric_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->metric_index(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.ApiCustomMetricData)
}

int ClientBeaconBatch_ClientBeaconRecord_ApiCustomMetricData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 metric_value = 1;
    if (has_metric_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->metric_value());
    }

    // optional int32 metric_index = 2;
    if (has_metric_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->metric_index());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientBeaconBatch_ClientBeaconRecord_ApiCustomMetricData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClientBeaconBatch_ClientBeaconRecord_ApiCustomMetricData*>(&from));
}

void ClientBeaconBatch_ClientBeaconRecord_ApiCustomMetricData::MergeFrom(const ClientBeaconBatch_ClientBeaconRecord_ApiCustomMetricData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_metric_value()) {
      set_metric_value(from.metric_value());
    }
    if (from.has_metric_index()) {
      set_metric_index(from.metric_index());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ClientBeaconBatch_ClientBeaconRecord_ApiCustomMetricData::CopyFrom(const ClientBeaconBatch_ClientBeaconRecord_ApiCustomMetricData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientBeaconBatch_ClientBeaconRecord_ApiCustomMetricData::IsInitialized() const {

  return true;
}

void ClientBeaconBatch_ClientBeaconRecord_ApiCustomMetricData::Swap(ClientBeaconBatch_ClientBeaconRecord_ApiCustomMetricData* other) {
  if (other != this) {
    std::swap(metric_value_, other->metric_value_);
    std::swap(metric_index_, other->metric_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ClientBeaconBatch_ClientBeaconRecord_ApiCustomMetricData::GetTypeName() const {
  return "client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.ApiCustomMetricData";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ClientBeaconBatch_ClientBeaconRecord_AppLaunchData::kIsFirstInstallFieldNumber;
#endif  // !_MSC_VER

ClientBeaconBatch_ClientBeaconRecord_AppLaunchData::ClientBeaconBatch_ClientBeaconRecord_AppLaunchData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppLaunchData)
}

void ClientBeaconBatch_ClientBeaconRecord_AppLaunchData::InitAsDefaultInstance() {
}

ClientBeaconBatch_ClientBeaconRecord_AppLaunchData::ClientBeaconBatch_ClientBeaconRecord_AppLaunchData(const ClientBeaconBatch_ClientBeaconRecord_AppLaunchData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppLaunchData)
}

void ClientBeaconBatch_ClientBeaconRecord_AppLaunchData::SharedCtor() {
  _cached_size_ = 0;
  is_first_install_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientBeaconBatch_ClientBeaconRecord_AppLaunchData::~ClientBeaconBatch_ClientBeaconRecord_AppLaunchData() {
  // @@protoc_insertion_point(destructor:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppLaunchData)
  SharedDtor();
}

void ClientBeaconBatch_ClientBeaconRecord_AppLaunchData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ClientBeaconBatch_ClientBeaconRecord_AppLaunchData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClientBeaconBatch_ClientBeaconRecord_AppLaunchData& ClientBeaconBatch_ClientBeaconRecord_AppLaunchData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ClientBeaconBatch_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ClientBeaconBatch_2eproto();
#endif
  return *default_instance_;
}

ClientBeaconBatch_ClientBeaconRecord_AppLaunchData* ClientBeaconBatch_ClientBeaconRecord_AppLaunchData::default_instance_ = NULL;

ClientBeaconBatch_ClientBeaconRecord_AppLaunchData* ClientBeaconBatch_ClientBeaconRecord_AppLaunchData::New() const {
  return new ClientBeaconBatch_ClientBeaconRecord_AppLaunchData;
}

void ClientBeaconBatch_ClientBeaconRecord_AppLaunchData::Clear() {
  is_first_install_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ClientBeaconBatch_ClientBeaconRecord_AppLaunchData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppLaunchData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_first_install = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_first_install_)));
          set_has_is_first_install();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppLaunchData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppLaunchData)
  return false;
#undef DO_
}

void ClientBeaconBatch_ClientBeaconRecord_AppLaunchData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppLaunchData)
  // optional bool is_first_install = 1;
  if (has_is_first_install()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_first_install(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppLaunchData)
}

int ClientBeaconBatch_ClientBeaconRecord_AppLaunchData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool is_first_install = 1;
    if (has_is_first_install()) {
      total_size += 1 + 1;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientBeaconBatch_ClientBeaconRecord_AppLaunchData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClientBeaconBatch_ClientBeaconRecord_AppLaunchData*>(&from));
}

void ClientBeaconBatch_ClientBeaconRecord_AppLaunchData::MergeFrom(const ClientBeaconBatch_ClientBeaconRecord_AppLaunchData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_first_install()) {
      set_is_first_install(from.is_first_install());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ClientBeaconBatch_ClientBeaconRecord_AppLaunchData::CopyFrom(const ClientBeaconBatch_ClientBeaconRecord_AppLaunchData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientBeaconBatch_ClientBeaconRecord_AppLaunchData::IsInitialized() const {

  return true;
}

void ClientBeaconBatch_ClientBeaconRecord_AppLaunchData::Swap(ClientBeaconBatch_ClientBeaconRecord_AppLaunchData* other) {
  if (other != this) {
    std::swap(is_first_install_, other->is_first_install_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ClientBeaconBatch_ClientBeaconRecord_AppLaunchData::GetTypeName() const {
  return "client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppLaunchData";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

ClientBeaconBatch_ClientBeaconRecord_AppInactiveData::ClientBeaconBatch_ClientBeaconRecord_AppInactiveData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppInactiveData)
}

void ClientBeaconBatch_ClientBeaconRecord_AppInactiveData::InitAsDefaultInstance() {
}

ClientBeaconBatch_ClientBeaconRecord_AppInactiveData::ClientBeaconBatch_ClientBeaconRecord_AppInactiveData(const ClientBeaconBatch_ClientBeaconRecord_AppInactiveData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppInactiveData)
}

void ClientBeaconBatch_ClientBeaconRecord_AppInactiveData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientBeaconBatch_ClientBeaconRecord_AppInactiveData::~ClientBeaconBatch_ClientBeaconRecord_AppInactiveData() {
  // @@protoc_insertion_point(destructor:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppInactiveData)
  SharedDtor();
}

void ClientBeaconBatch_ClientBeaconRecord_AppInactiveData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ClientBeaconBatch_ClientBeaconRecord_AppInactiveData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClientBeaconBatch_ClientBeaconRecord_AppInactiveData& ClientBeaconBatch_ClientBeaconRecord_AppInactiveData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ClientBeaconBatch_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ClientBeaconBatch_2eproto();
#endif
  return *default_instance_;
}

ClientBeaconBatch_ClientBeaconRecord_AppInactiveData* ClientBeaconBatch_ClientBeaconRecord_AppInactiveData::default_instance_ = NULL;

ClientBeaconBatch_ClientBeaconRecord_AppInactiveData* ClientBeaconBatch_ClientBeaconRecord_AppInactiveData::New() const {
  return new ClientBeaconBatch_ClientBeaconRecord_AppInactiveData;
}

void ClientBeaconBatch_ClientBeaconRecord_AppInactiveData::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ClientBeaconBatch_ClientBeaconRecord_AppInactiveData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppInactiveData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppInactiveData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppInactiveData)
  return false;
#undef DO_
}

void ClientBeaconBatch_ClientBeaconRecord_AppInactiveData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppInactiveData)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppInactiveData)
}

int ClientBeaconBatch_ClientBeaconRecord_AppInactiveData::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientBeaconBatch_ClientBeaconRecord_AppInactiveData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClientBeaconBatch_ClientBeaconRecord_AppInactiveData*>(&from));
}

void ClientBeaconBatch_ClientBeaconRecord_AppInactiveData::MergeFrom(const ClientBeaconBatch_ClientBeaconRecord_AppInactiveData& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ClientBeaconBatch_ClientBeaconRecord_AppInactiveData::CopyFrom(const ClientBeaconBatch_ClientBeaconRecord_AppInactiveData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientBeaconBatch_ClientBeaconRecord_AppInactiveData::IsInitialized() const {

  return true;
}

void ClientBeaconBatch_ClientBeaconRecord_AppInactiveData::Swap(ClientBeaconBatch_ClientBeaconRecord_AppInactiveData* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ClientBeaconBatch_ClientBeaconRecord_AppInactiveData::GetTypeName() const {
  return "client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppInactiveData";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ClientBeaconBatch_ClientBeaconRecord_AppEventClickData::kIdFieldNumber;
const int ClientBeaconBatch_ClientBeaconRecord_AppEventClickData::kNameFieldNumber;
const int ClientBeaconBatch_ClientBeaconRecord_AppEventClickData::kTagNameFieldNumber;
const int ClientBeaconBatch_ClientBeaconRecord_AppEventClickData::kXFieldNumber;
const int ClientBeaconBatch_ClientBeaconRecord_AppEventClickData::kYFieldNumber;
#endif  // !_MSC_VER

ClientBeaconBatch_ClientBeaconRecord_AppEventClickData::ClientBeaconBatch_ClientBeaconRecord_AppEventClickData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppEventClickData)
}

void ClientBeaconBatch_ClientBeaconRecord_AppEventClickData::InitAsDefaultInstance() {
}

ClientBeaconBatch_ClientBeaconRecord_AppEventClickData::ClientBeaconBatch_ClientBeaconRecord_AppEventClickData(const ClientBeaconBatch_ClientBeaconRecord_AppEventClickData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppEventClickData)
}

void ClientBeaconBatch_ClientBeaconRecord_AppEventClickData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientBeaconBatch_ClientBeaconRecord_AppEventClickData::~ClientBeaconBatch_ClientBeaconRecord_AppEventClickData() {
  // @@protoc_insertion_point(destructor:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppEventClickData)
  SharedDtor();
}

void ClientBeaconBatch_ClientBeaconRecord_AppEventClickData::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (tag_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tag_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ClientBeaconBatch_ClientBeaconRecord_AppEventClickData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClientBeaconBatch_ClientBeaconRecord_AppEventClickData& ClientBeaconBatch_ClientBeaconRecord_AppEventClickData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ClientBeaconBatch_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ClientBeaconBatch_2eproto();
#endif
  return *default_instance_;
}

ClientBeaconBatch_ClientBeaconRecord_AppEventClickData* ClientBeaconBatch_ClientBeaconRecord_AppEventClickData::default_instance_ = NULL;

ClientBeaconBatch_ClientBeaconRecord_AppEventClickData* ClientBeaconBatch_ClientBeaconRecord_AppEventClickData::New() const {
  return new ClientBeaconBatch_ClientBeaconRecord_AppEventClickData;
}

void ClientBeaconBatch_ClientBeaconRecord_AppEventClickData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClientBeaconBatch_ClientBeaconRecord_AppEventClickData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(x_, y_);
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_tag_name()) {
      if (tag_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tag_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ClientBeaconBatch_ClientBeaconRecord_AppEventClickData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppEventClickData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tag_name;
        break;
      }

      // optional string tag_name = 3;
      case 3: {
        if (tag == 26) {
         parse_tag_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_x;
        break;
      }

      // optional int32 x = 4;
      case 4: {
        if (tag == 32) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_y;
        break;
      }

      // optional int32 y = 5;
      case 5: {
        if (tag == 40) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppEventClickData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppEventClickData)
  return false;
#undef DO_
}

void ClientBeaconBatch_ClientBeaconRecord_AppEventClickData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppEventClickData)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string tag_name = 3;
  if (has_tag_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tag_name(), output);
  }

  // optional int32 x = 4;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->x(), output);
  }

  // optional int32 y = 5;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->y(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppEventClickData)
}

int ClientBeaconBatch_ClientBeaconRecord_AppEventClickData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string tag_name = 3;
    if (has_tag_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag_name());
    }

    // optional int32 x = 4;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 5;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientBeaconBatch_ClientBeaconRecord_AppEventClickData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClientBeaconBatch_ClientBeaconRecord_AppEventClickData*>(&from));
}

void ClientBeaconBatch_ClientBeaconRecord_AppEventClickData::MergeFrom(const ClientBeaconBatch_ClientBeaconRecord_AppEventClickData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_tag_name()) {
      set_tag_name(from.tag_name());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ClientBeaconBatch_ClientBeaconRecord_AppEventClickData::CopyFrom(const ClientBeaconBatch_ClientBeaconRecord_AppEventClickData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientBeaconBatch_ClientBeaconRecord_AppEventClickData::IsInitialized() const {

  return true;
}

void ClientBeaconBatch_ClientBeaconRecord_AppEventClickData::Swap(ClientBeaconBatch_ClientBeaconRecord_AppEventClickData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(tag_name_, other->tag_name_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ClientBeaconBatch_ClientBeaconRecord_AppEventClickData::GetTypeName() const {
  return "client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppEventClickData";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ClientBeaconBatch_ClientBeaconRecord_AppEventNetworkData::kUrlFieldNumber;
const int ClientBeaconBatch_ClientBeaconRecord_AppEventNetworkData::kMethodFieldNumber;
const int ClientBeaconBatch_ClientBeaconRecord_AppEventNetworkData::kResultFieldNumber;
#endif  // !_MSC_VER

ClientBeaconBatch_ClientBeaconRecord_AppEventNetworkData::ClientBeaconBatch_ClientBeaconRecord_AppEventNetworkData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppEventNetworkData)
}

void ClientBeaconBatch_ClientBeaconRecord_AppEventNetworkData::InitAsDefaultInstance() {
}

ClientBeaconBatch_ClientBeaconRecord_AppEventNetworkData::ClientBeaconBatch_ClientBeaconRecord_AppEventNetworkData(const ClientBeaconBatch_ClientBeaconRecord_AppEventNetworkData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppEventNetworkData)
}

void ClientBeaconBatch_ClientBeaconRecord_AppEventNetworkData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_ = 1;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientBeaconBatch_ClientBeaconRecord_AppEventNetworkData::~ClientBeaconBatch_ClientBeaconRecord_AppEventNetworkData() {
  // @@protoc_insertion_point(destructor:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppEventNetworkData)
  SharedDtor();
}

void ClientBeaconBatch_ClientBeaconRecord_AppEventNetworkData::SharedDtor() {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ClientBeaconBatch_ClientBeaconRecord_AppEventNetworkData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClientBeaconBatch_ClientBeaconRecord_AppEventNetworkData& ClientBeaconBatch_ClientBeaconRecord_AppEventNetworkData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ClientBeaconBatch_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ClientBeaconBatch_2eproto();
#endif
  return *default_instance_;
}

ClientBeaconBatch_ClientBeaconRecord_AppEventNetworkData* ClientBeaconBatch_ClientBeaconRecord_AppEventNetworkData::default_instance_ = NULL;

ClientBeaconBatch_ClientBeaconRecord_AppEventNetworkData* ClientBeaconBatch_ClientBeaconRecord_AppEventNetworkData::New() const {
  return new ClientBeaconBatch_ClientBeaconRecord_AppEventNetworkData;
}

void ClientBeaconBatch_ClientBeaconRecord_AppEventNetworkData::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        url_->clear();
      }
    }
    method_ = 1;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ClientBeaconBatch_ClientBeaconRecord_AppEventNetworkData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppEventNetworkData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string url = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_method;
        break;
      }

      // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppEventNetworkMethodType method = 2;
      case 2: {
        if (tag == 16) {
         parse_method:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_beacon_batch::ClientBeaconBatch_ClientBeaconRecord_AppEventNetworkMethodType_IsValid(value)) {
            set_method(static_cast< ::client_beacon_batch::ClientBeaconBatch_ClientBeaconRecord_AppEventNetworkMethodType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional int32 result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppEventNetworkData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppEventNetworkData)
  return false;
#undef DO_
}

void ClientBeaconBatch_ClientBeaconRecord_AppEventNetworkData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppEventNetworkData)
  // optional string url = 1;
  if (has_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppEventNetworkMethodType method = 2;
  if (has_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->method(), output);
  }

  // optional int32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppEventNetworkData)
}

int ClientBeaconBatch_ClientBeaconRecord_AppEventNetworkData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string url = 1;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppEventNetworkMethodType method = 2;
    if (has_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->method());
    }

    // optional int32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientBeaconBatch_ClientBeaconRecord_AppEventNetworkData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClientBeaconBatch_ClientBeaconRecord_AppEventNetworkData*>(&from));
}

void ClientBeaconBatch_ClientBeaconRecord_AppEventNetworkData::MergeFrom(const ClientBeaconBatch_ClientBeaconRecord_AppEventNetworkData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_method()) {
      set_method(from.method());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ClientBeaconBatch_ClientBeaconRecord_AppEventNetworkData::CopyFrom(const ClientBeaconBatch_ClientBeaconRecord_AppEventNetworkData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientBeaconBatch_ClientBeaconRecord_AppEventNetworkData::IsInitialized() const {

  return true;
}

void ClientBeaconBatch_ClientBeaconRecord_AppEventNetworkData::Swap(ClientBeaconBatch_ClientBeaconRecord_AppEventNetworkData* other) {
  if (other != this) {
    std::swap(url_, other->url_);
    std::swap(method_, other->method_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ClientBeaconBatch_ClientBeaconRecord_AppEventNetworkData::GetTypeName() const {
  return "client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppEventNetworkData";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ClientBeaconBatch_ClientBeaconRecord_AppEventLogData::kMessageFieldNumber;
const int ClientBeaconBatch_ClientBeaconRecord_AppEventLogData::kSeverityFieldNumber;
#endif  // !_MSC_VER

ClientBeaconBatch_ClientBeaconRecord_AppEventLogData::ClientBeaconBatch_ClientBeaconRecord_AppEventLogData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppEventLogData)
}

void ClientBeaconBatch_ClientBeaconRecord_AppEventLogData::InitAsDefaultInstance() {
}

ClientBeaconBatch_ClientBeaconRecord_AppEventLogData::ClientBeaconBatch_ClientBeaconRecord_AppEventLogData(const ClientBeaconBatch_ClientBeaconRecord_AppEventLogData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppEventLogData)
}

void ClientBeaconBatch_ClientBeaconRecord_AppEventLogData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  severity_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientBeaconBatch_ClientBeaconRecord_AppEventLogData::~ClientBeaconBatch_ClientBeaconRecord_AppEventLogData() {
  // @@protoc_insertion_point(destructor:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppEventLogData)
  SharedDtor();
}

void ClientBeaconBatch_ClientBeaconRecord_AppEventLogData::SharedDtor() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ClientBeaconBatch_ClientBeaconRecord_AppEventLogData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClientBeaconBatch_ClientBeaconRecord_AppEventLogData& ClientBeaconBatch_ClientBeaconRecord_AppEventLogData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ClientBeaconBatch_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ClientBeaconBatch_2eproto();
#endif
  return *default_instance_;
}

ClientBeaconBatch_ClientBeaconRecord_AppEventLogData* ClientBeaconBatch_ClientBeaconRecord_AppEventLogData::default_instance_ = NULL;

ClientBeaconBatch_ClientBeaconRecord_AppEventLogData* ClientBeaconBatch_ClientBeaconRecord_AppEventLogData::New() const {
  return new ClientBeaconBatch_ClientBeaconRecord_AppEventLogData;
}

void ClientBeaconBatch_ClientBeaconRecord_AppEventLogData::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        message_->clear();
      }
    }
    severity_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ClientBeaconBatch_ClientBeaconRecord_AppEventLogData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppEventLogData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_severity;
        break;
      }

      // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppEventLogSeverityType severity = 2;
      case 2: {
        if (tag == 16) {
         parse_severity:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_beacon_batch::ClientBeaconBatch_ClientBeaconRecord_AppEventLogSeverityType_IsValid(value)) {
            set_severity(static_cast< ::client_beacon_batch::ClientBeaconBatch_ClientBeaconRecord_AppEventLogSeverityType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppEventLogData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppEventLogData)
  return false;
#undef DO_
}

void ClientBeaconBatch_ClientBeaconRecord_AppEventLogData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppEventLogData)
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppEventLogSeverityType severity = 2;
  if (has_severity()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->severity(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppEventLogData)
}

int ClientBeaconBatch_ClientBeaconRecord_AppEventLogData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppEventLogSeverityType severity = 2;
    if (has_severity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->severity());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientBeaconBatch_ClientBeaconRecord_AppEventLogData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClientBeaconBatch_ClientBeaconRecord_AppEventLogData*>(&from));
}

void ClientBeaconBatch_ClientBeaconRecord_AppEventLogData::MergeFrom(const ClientBeaconBatch_ClientBeaconRecord_AppEventLogData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_severity()) {
      set_severity(from.severity());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ClientBeaconBatch_ClientBeaconRecord_AppEventLogData::CopyFrom(const ClientBeaconBatch_ClientBeaconRecord_AppEventLogData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientBeaconBatch_ClientBeaconRecord_AppEventLogData::IsInitialized() const {

  return true;
}

void ClientBeaconBatch_ClientBeaconRecord_AppEventLogData::Swap(ClientBeaconBatch_ClientBeaconRecord_AppEventLogData* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(severity_, other->severity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ClientBeaconBatch_ClientBeaconRecord_AppEventLogData::GetTypeName() const {
  return "client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppEventLogData";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ClientBeaconBatch_ClientBeaconRecord_AppEventData::kTimestampFieldNumber;
const int ClientBeaconBatch_ClientBeaconRecord_AppEventData::kTypeFieldNumber;
const int ClientBeaconBatch_ClientBeaconRecord_AppEventData::kClickDataFieldNumber;
const int ClientBeaconBatch_ClientBeaconRecord_AppEventData::kNetworkDataFieldNumber;
const int ClientBeaconBatch_ClientBeaconRecord_AppEventData::kLogDataFieldNumber;
#endif  // !_MSC_VER

ClientBeaconBatch_ClientBeaconRecord_AppEventData::ClientBeaconBatch_ClientBeaconRecord_AppEventData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppEventData)
}

void ClientBeaconBatch_ClientBeaconRecord_AppEventData::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  click_data_ = const_cast< ::client_beacon_batch::ClientBeaconBatch_ClientBeaconRecord_AppEventClickData*>(
      ::client_beacon_batch::ClientBeaconBatch_ClientBeaconRecord_AppEventClickData::internal_default_instance());
#else
  click_data_ = const_cast< ::client_beacon_batch::ClientBeaconBatch_ClientBeaconRecord_AppEventClickData*>(&::client_beacon_batch::ClientBeaconBatch_ClientBeaconRecord_AppEventClickData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  network_data_ = const_cast< ::client_beacon_batch::ClientBeaconBatch_ClientBeaconRecord_AppEventNetworkData*>(
      ::client_beacon_batch::ClientBeaconBatch_ClientBeaconRecord_AppEventNetworkData::internal_default_instance());
#else
  network_data_ = const_cast< ::client_beacon_batch::ClientBeaconBatch_ClientBeaconRecord_AppEventNetworkData*>(&::client_beacon_batch::ClientBeaconBatch_ClientBeaconRecord_AppEventNetworkData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  log_data_ = const_cast< ::client_beacon_batch::ClientBeaconBatch_ClientBeaconRecord_AppEventLogData*>(
      ::client_beacon_batch::ClientBeaconBatch_ClientBeaconRecord_AppEventLogData::internal_default_instance());
#else
  log_data_ = const_cast< ::client_beacon_batch::ClientBeaconBatch_ClientBeaconRecord_AppEventLogData*>(&::client_beacon_batch::ClientBeaconBatch_ClientBeaconRecord_AppEventLogData::default_instance());
#endif
}

ClientBeaconBatch_ClientBeaconRecord_AppEventData::ClientBeaconBatch_ClientBeaconRecord_AppEventData(const ClientBeaconBatch_ClientBeaconRecord_AppEventData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppEventData)
}

void ClientBeaconBatch_ClientBeaconRecord_AppEventData::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  type_ = 1;
  click_data_ = NULL;
  network_data_ = NULL;
  log_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientBeaconBatch_ClientBeaconRecord_AppEventData::~ClientBeaconBatch_ClientBeaconRecord_AppEventData() {
  // @@protoc_insertion_point(destructor:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppEventData)
  SharedDtor();
}

void ClientBeaconBatch_ClientBeaconRecord_AppEventData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete click_data_;
    delete network_data_;
    delete log_data_;
  }
}

void ClientBeaconBatch_ClientBeaconRecord_AppEventData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClientBeaconBatch_ClientBeaconRecord_AppEventData& ClientBeaconBatch_ClientBeaconRecord_AppEventData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ClientBeaconBatch_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ClientBeaconBatch_2eproto();
#endif
  return *default_instance_;
}

ClientBeaconBatch_ClientBeaconRecord_AppEventData* ClientBeaconBatch_ClientBeaconRecord_AppEventData::default_instance_ = NULL;

ClientBeaconBatch_ClientBeaconRecord_AppEventData* ClientBeaconBatch_ClientBeaconRecord_AppEventData::New() const {
  return new ClientBeaconBatch_ClientBeaconRecord_AppEventData;
}

void ClientBeaconBatch_ClientBeaconRecord_AppEventData::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    timestamp_ = GOOGLE_LONGLONG(0);
    type_ = 1;
    if (has_click_data()) {
      if (click_data_ != NULL) click_data_->::client_beacon_batch::ClientBeaconBatch_ClientBeaconRecord_AppEventClickData::Clear();
    }
    if (has_network_data()) {
      if (network_data_ != NULL) network_data_->::client_beacon_batch::ClientBeaconBatch_ClientBeaconRecord_AppEventNetworkData::Clear();
    }
    if (has_log_data()) {
      if (log_data_ != NULL) log_data_->::client_beacon_batch::ClientBeaconBatch_ClientBeaconRecord_AppEventLogData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ClientBeaconBatch_ClientBeaconRecord_AppEventData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppEventData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppEventType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_beacon_batch::ClientBeaconBatch_ClientBeaconRecord_AppEventType_IsValid(value)) {
            set_type(static_cast< ::client_beacon_batch::ClientBeaconBatch_ClientBeaconRecord_AppEventType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_click_data;
        break;
      }

      // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppEventClickData click_data = 3;
      case 3: {
        if (tag == 26) {
         parse_click_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_click_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_network_data;
        break;
      }

      // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppEventNetworkData network_data = 4;
      case 4: {
        if (tag == 34) {
         parse_network_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_network_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_log_data;
        break;
      }

      // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppEventLogData log_data = 5;
      case 5: {
        if (tag == 42) {
         parse_log_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_log_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppEventData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppEventData)
  return false;
#undef DO_
}

void ClientBeaconBatch_ClientBeaconRecord_AppEventData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppEventData)
  // optional int64 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppEventType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppEventClickData click_data = 3;
  if (has_click_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->click_data(), output);
  }

  // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppEventNetworkData network_data = 4;
  if (has_network_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->network_data(), output);
  }

  // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppEventLogData log_data = 5;
  if (has_log_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->log_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppEventData)
}

int ClientBeaconBatch_ClientBeaconRecord_AppEventData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppEventType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppEventClickData click_data = 3;
    if (has_click_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->click_data());
    }

    // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppEventNetworkData network_data = 4;
    if (has_network_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->network_data());
    }

    // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppEventLogData log_data = 5;
    if (has_log_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->log_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientBeaconBatch_ClientBeaconRecord_AppEventData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClientBeaconBatch_ClientBeaconRecord_AppEventData*>(&from));
}

void ClientBeaconBatch_ClientBeaconRecord_AppEventData::MergeFrom(const ClientBeaconBatch_ClientBeaconRecord_AppEventData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_click_data()) {
      mutable_click_data()->::client_beacon_batch::ClientBeaconBatch_ClientBeaconRecord_AppEventClickData::MergeFrom(from.click_data());
    }
    if (from.has_network_data()) {
      mutable_network_data()->::client_beacon_batch::ClientBeaconBatch_ClientBeaconRecord_AppEventNetworkData::MergeFrom(from.network_data());
    }
    if (from.has_log_data()) {
      mutable_log_data()->::client_beacon_batch::ClientBeaconBatch_ClientBeaconRecord_AppEventLogData::MergeFrom(from.log_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ClientBeaconBatch_ClientBeaconRecord_AppEventData::CopyFrom(const ClientBeaconBatch_ClientBeaconRecord_AppEventData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientBeaconBatch_ClientBeaconRecord_AppEventData::IsInitialized() const {

  return true;
}

void ClientBeaconBatch_ClientBeaconRecord_AppEventData::Swap(ClientBeaconBatch_ClientBeaconRecord_AppEventData* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(type_, other->type_);
    std::swap(click_data_, other->click_data_);
    std::swap(network_data_, other->network_data_);
    std::swap(log_data_, other->log_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ClientBeaconBatch_ClientBeaconRecord_AppEventData::GetTypeName() const {
  return "client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppEventData";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ClientBeaconBatch_ClientBeaconRecord_AppErrorFrameData::kFunctionNameFieldNumber;
const int ClientBeaconBatch_ClientBeaconRecord_AppErrorFrameData::kFileNameFieldNumber;
const int ClientBeaconBatch_ClientBeaconRecord_AppErrorFrameData::kLineNumberFieldNumber;
const int ClientBeaconBatch_ClientBeaconRecord_AppErrorFrameData::kColumnNumberFieldNumber;
const int ClientBeaconBatch_ClientBeaconRecord_AppErrorFrameData::kSourceFieldNumber;
const int ClientBeaconBatch_ClientBeaconRecord_AppErrorFrameData::kClassNameFieldNumber;
#endif  // !_MSC_VER

ClientBeaconBatch_ClientBeaconRecord_AppErrorFrameData::ClientBeaconBatch_ClientBeaconRecord_AppErrorFrameData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppErrorFrameData)
}

void ClientBeaconBatch_ClientBeaconRecord_AppErrorFrameData::InitAsDefaultInstance() {
}

ClientBeaconBatch_ClientBeaconRecord_AppErrorFrameData::ClientBeaconBatch_ClientBeaconRecord_AppErrorFrameData(const ClientBeaconBatch_ClientBeaconRecord_AppErrorFrameData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppErrorFrameData)
}

void ClientBeaconBatch_ClientBeaconRecord_AppErrorFrameData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  functionname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  linenumber_ = 0;
  columnnumber_ = 0;
  source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  classname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientBeaconBatch_ClientBeaconRecord_AppErrorFrameData::~ClientBeaconBatch_ClientBeaconRecord_AppErrorFrameData() {
  // @@protoc_insertion_point(destructor:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppErrorFrameData)
  SharedDtor();
}

void ClientBeaconBatch_ClientBeaconRecord_AppErrorFrameData::SharedDtor() {
  if (functionname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete functionname_;
  }
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete source_;
  }
  if (classname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete classname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ClientBeaconBatch_ClientBeaconRecord_AppErrorFrameData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClientBeaconBatch_ClientBeaconRecord_AppErrorFrameData& ClientBeaconBatch_ClientBeaconRecord_AppErrorFrameData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ClientBeaconBatch_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ClientBeaconBatch_2eproto();
#endif
  return *default_instance_;
}

ClientBeaconBatch_ClientBeaconRecord_AppErrorFrameData* ClientBeaconBatch_ClientBeaconRecord_AppErrorFrameData::default_instance_ = NULL;

ClientBeaconBatch_ClientBeaconRecord_AppErrorFrameData* ClientBeaconBatch_ClientBeaconRecord_AppErrorFrameData::New() const {
  return new ClientBeaconBatch_ClientBeaconRecord_AppErrorFrameData;
}

void ClientBeaconBatch_ClientBeaconRecord_AppErrorFrameData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClientBeaconBatch_ClientBeaconRecord_AppErrorFrameData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(linenumber_, columnnumber_);
    if (has_functionname()) {
      if (functionname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        functionname_->clear();
      }
    }
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filename_->clear();
      }
    }
    if (has_source()) {
      if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        source_->clear();
      }
    }
    if (has_classname()) {
      if (classname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        classname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ClientBeaconBatch_ClientBeaconRecord_AppErrorFrameData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppErrorFrameData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string functionName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_functionname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fileName;
        break;
      }

      // optional string fileName = 2;
      case 2: {
        if (tag == 18) {
         parse_fileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_lineNumber;
        break;
      }

      // optional int32 lineNumber = 3;
      case 3: {
        if (tag == 24) {
         parse_lineNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &linenumber_)));
          set_has_linenumber();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_columnNumber;
        break;
      }

      // optional int32 columnNumber = 4;
      case 4: {
        if (tag == 32) {
         parse_columnNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &columnnumber_)));
          set_has_columnnumber();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_source;
        break;
      }

      // optional string source = 5;
      case 5: {
        if (tag == 42) {
         parse_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_className;
        break;
      }

      // optional string className = 6;
      case 6: {
        if (tag == 50) {
         parse_className:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_classname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppErrorFrameData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppErrorFrameData)
  return false;
#undef DO_
}

void ClientBeaconBatch_ClientBeaconRecord_AppErrorFrameData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppErrorFrameData)
  // optional string functionName = 1;
  if (has_functionname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->functionname(), output);
  }

  // optional string fileName = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filename(), output);
  }

  // optional int32 lineNumber = 3;
  if (has_linenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->linenumber(), output);
  }

  // optional int32 columnNumber = 4;
  if (has_columnnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->columnnumber(), output);
  }

  // optional string source = 5;
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->source(), output);
  }

  // optional string className = 6;
  if (has_classname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->classname(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppErrorFrameData)
}

int ClientBeaconBatch_ClientBeaconRecord_AppErrorFrameData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string functionName = 1;
    if (has_functionname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->functionname());
    }

    // optional string fileName = 2;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional int32 lineNumber = 3;
    if (has_linenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->linenumber());
    }

    // optional int32 columnNumber = 4;
    if (has_columnnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->columnnumber());
    }

    // optional string source = 5;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // optional string className = 6;
    if (has_classname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->classname());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientBeaconBatch_ClientBeaconRecord_AppErrorFrameData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClientBeaconBatch_ClientBeaconRecord_AppErrorFrameData*>(&from));
}

void ClientBeaconBatch_ClientBeaconRecord_AppErrorFrameData::MergeFrom(const ClientBeaconBatch_ClientBeaconRecord_AppErrorFrameData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_functionname()) {
      set_functionname(from.functionname());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_linenumber()) {
      set_linenumber(from.linenumber());
    }
    if (from.has_columnnumber()) {
      set_columnnumber(from.columnnumber());
    }
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_classname()) {
      set_classname(from.classname());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ClientBeaconBatch_ClientBeaconRecord_AppErrorFrameData::CopyFrom(const ClientBeaconBatch_ClientBeaconRecord_AppErrorFrameData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientBeaconBatch_ClientBeaconRecord_AppErrorFrameData::IsInitialized() const {

  return true;
}

void ClientBeaconBatch_ClientBeaconRecord_AppErrorFrameData::Swap(ClientBeaconBatch_ClientBeaconRecord_AppErrorFrameData* other) {
  if (other != this) {
    std::swap(functionname_, other->functionname_);
    std::swap(filename_, other->filename_);
    std::swap(linenumber_, other->linenumber_);
    std::swap(columnnumber_, other->columnnumber_);
    std::swap(source_, other->source_);
    std::swap(classname_, other->classname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ClientBeaconBatch_ClientBeaconRecord_AppErrorFrameData::GetTypeName() const {
  return "client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppErrorFrameData";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ClientBeaconBatch_ClientBeaconRecord_AppErrorData::kCountFieldNumber;
const int ClientBeaconBatch_ClientBeaconRecord_AppErrorData::kTimestampFieldNumber;
const int ClientBeaconBatch_ClientBeaconRecord_AppErrorData::kCodeFieldNumber;
const int ClientBeaconBatch_ClientBeaconRecord_AppErrorData::kMessageFieldNumber;
const int ClientBeaconBatch_ClientBeaconRecord_AppErrorData::kFunctionNameFieldNumber;
const int ClientBeaconBatch_ClientBeaconRecord_AppErrorData::kFileNameFieldNumber;
const int ClientBeaconBatch_ClientBeaconRecord_AppErrorData::kLineNumberFieldNumber;
const int ClientBeaconBatch_ClientBeaconRecord_AppErrorData::kColumnNumberFieldNumber;
const int ClientBeaconBatch_ClientBeaconRecord_AppErrorData::kClassNameFieldNumber;
const int ClientBeaconBatch_ClientBeaconRecord_AppErrorData::kStackFieldNumber;
const int ClientBeaconBatch_ClientBeaconRecord_AppErrorData::kTypeFieldNumber;
const int ClientBeaconBatch_ClientBeaconRecord_AppErrorData::kExtraFieldNumber;
const int ClientBeaconBatch_ClientBeaconRecord_AppErrorData::kSourceFieldNumber;
const int ClientBeaconBatch_ClientBeaconRecord_AppErrorData::kViaFieldNumber;
const int ClientBeaconBatch_ClientBeaconRecord_AppErrorData::kEventsFieldNumber;
const int ClientBeaconBatch_ClientBeaconRecord_AppErrorData::kFramesFieldNumber;
#endif  // !_MSC_VER

ClientBeaconBatch_ClientBeaconRecord_AppErrorData::ClientBeaconBatch_ClientBeaconRecord_AppErrorData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppErrorData)
}

void ClientBeaconBatch_ClientBeaconRecord_AppErrorData::InitAsDefaultInstance() {
}

ClientBeaconBatch_ClientBeaconRecord_AppErrorData::ClientBeaconBatch_ClientBeaconRecord_AppErrorData(const ClientBeaconBatch_ClientBeaconRecord_AppErrorData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppErrorData)
}

void ClientBeaconBatch_ClientBeaconRecord_AppErrorData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  count_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  code_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  functionname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  linenumber_ = 0;
  columnnumber_ = 0;
  classname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stack_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extra_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_ = 1;
  via_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientBeaconBatch_ClientBeaconRecord_AppErrorData::~ClientBeaconBatch_ClientBeaconRecord_AppErrorData() {
  // @@protoc_insertion_point(destructor:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppErrorData)
  SharedDtor();
}

void ClientBeaconBatch_ClientBeaconRecord_AppErrorData::SharedDtor() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (functionname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete functionname_;
  }
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (classname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete classname_;
  }
  if (stack_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete stack_;
  }
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (extra_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete extra_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ClientBeaconBatch_ClientBeaconRecord_AppErrorData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClientBeaconBatch_ClientBeaconRecord_AppErrorData& ClientBeaconBatch_ClientBeaconRecord_AppErrorData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ClientBeaconBatch_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ClientBeaconBatch_2eproto();
#endif
  return *default_instance_;
}

ClientBeaconBatch_ClientBeaconRecord_AppErrorData* ClientBeaconBatch_ClientBeaconRecord_AppErrorData::default_instance_ = NULL;

ClientBeaconBatch_ClientBeaconRecord_AppErrorData* ClientBeaconBatch_ClientBeaconRecord_AppErrorData::New() const {
  return new ClientBeaconBatch_ClientBeaconRecord_AppErrorData;
}

void ClientBeaconBatch_ClientBeaconRecord_AppErrorData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClientBeaconBatch_ClientBeaconRecord_AppErrorData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(timestamp_, code_);
    ZR_(linenumber_, columnnumber_);
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        message_->clear();
      }
    }
    if (has_functionname()) {
      if (functionname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        functionname_->clear();
      }
    }
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filename_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 16128) {
    if (has_classname()) {
      if (classname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        classname_->clear();
      }
    }
    if (has_stack()) {
      if (stack_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        stack_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
    if (has_extra()) {
      if (extra_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        extra_->clear();
      }
    }
    source_ = 1;
    via_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  events_.Clear();
  frames_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ClientBeaconBatch_ClientBeaconRecord_AppErrorData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppErrorData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_timestamp;
        break;
      }

      // optional int64 timestamp = 2;
      case 2: {
        if (tag == 16) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_code;
        break;
      }

      // optional int32 code = 3;
      case 3: {
        if (tag == 24) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_message;
        break;
      }

      // optional string message = 4;
      case 4: {
        if (tag == 34) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_functionName;
        break;
      }

      // optional string functionName = 5;
      case 5: {
        if (tag == 42) {
         parse_functionName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_functionname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_fileName;
        break;
      }

      // optional string fileName = 6;
      case 6: {
        if (tag == 50) {
         parse_fileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_lineNumber;
        break;
      }

      // optional int32 lineNumber = 7;
      case 7: {
        if (tag == 56) {
         parse_lineNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &linenumber_)));
          set_has_linenumber();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_columnNumber;
        break;
      }

      // optional int32 columnNumber = 8;
      case 8: {
        if (tag == 64) {
         parse_columnNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &columnnumber_)));
          set_has_columnnumber();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_className;
        break;
      }

      // optional string className = 9;
      case 9: {
        if (tag == 74) {
         parse_className:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_classname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_stack;
        break;
      }

      // optional string stack = 10;
      case 10: {
        if (tag == 82) {
         parse_stack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stack()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_type;
        break;
      }

      // optional string type = 11;
      case 11: {
        if (tag == 90) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_extra;
        break;
      }

      // optional string extra = 12;
      case 12: {
        if (tag == 98) {
         parse_extra:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extra()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_source;
        break;
      }

      // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppErrorSourceType source = 13;
      case 13: {
        if (tag == 104) {
         parse_source:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_beacon_batch::ClientBeaconBatch_ClientBeaconRecord_AppErrorSourceType_IsValid(value)) {
            set_source(static_cast< ::client_beacon_batch::ClientBeaconBatch_ClientBeaconRecord_AppErrorSourceType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_via;
        break;
      }

      // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppErrorViaType via = 14;
      case 14: {
        if (tag == 112) {
         parse_via:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_beacon_batch::ClientBeaconBatch_ClientBeaconRecord_AppErrorViaType_IsValid(value)) {
            set_via(static_cast< ::client_beacon_batch::ClientBeaconBatch_ClientBeaconRecord_AppErrorViaType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_events;
        break;
      }

      // repeated .client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppEventData events = 15;
      case 15: {
        if (tag == 122) {
         parse_events:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_events()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_events;
        if (input->ExpectTag(130)) goto parse_frames;
        break;
      }

      // repeated .client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppErrorFrameData frames = 16;
      case 16: {
        if (tag == 130) {
         parse_frames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_frames()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_frames;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppErrorData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppErrorData)
  return false;
#undef DO_
}

void ClientBeaconBatch_ClientBeaconRecord_AppErrorData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppErrorData)
  // optional int32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }

  // optional int64 timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }

  // optional int32 code = 3;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->code(), output);
  }

  // optional string message = 4;
  if (has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->message(), output);
  }

  // optional string functionName = 5;
  if (has_functionname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->functionname(), output);
  }

  // optional string fileName = 6;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->filename(), output);
  }

  // optional int32 lineNumber = 7;
  if (has_linenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->linenumber(), output);
  }

  // optional int32 columnNumber = 8;
  if (has_columnnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->columnnumber(), output);
  }

  // optional string className = 9;
  if (has_classname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->classname(), output);
  }

  // optional string stack = 10;
  if (has_stack()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->stack(), output);
  }

  // optional string type = 11;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->type(), output);
  }

  // optional string extra = 12;
  if (has_extra()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->extra(), output);
  }

  // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppErrorSourceType source = 13;
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->source(), output);
  }

  // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppErrorViaType via = 14;
  if (has_via()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->via(), output);
  }

  // repeated .client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppEventData events = 15;
  for (int i = 0; i < this->events_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15, this->events(i), output);
  }

  // repeated .client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppErrorFrameData frames = 16;
  for (int i = 0; i < this->frames_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      16, this->frames(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppErrorData)
}

int ClientBeaconBatch_ClientBeaconRecord_AppErrorData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional int64 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional int32 code = 3;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // optional string message = 4;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional string functionName = 5;
    if (has_functionname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->functionname());
    }

    // optional string fileName = 6;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional int32 lineNumber = 7;
    if (has_linenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->linenumber());
    }

    // optional int32 columnNumber = 8;
    if (has_columnnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->columnnumber());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string className = 9;
    if (has_classname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->classname());
    }

    // optional string stack = 10;
    if (has_stack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stack());
    }

    // optional string type = 11;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string extra = 12;
    if (has_extra()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extra());
    }

    // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppErrorSourceType source = 13;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->source());
    }

    // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppErrorViaType via = 14;
    if (has_via()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->via());
    }

  }
  // repeated .client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppEventData events = 15;
  total_size += 1 * this->events_size();
  for (int i = 0; i < this->events_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->events(i));
  }

  // repeated .client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppErrorFrameData frames = 16;
  total_size += 2 * this->frames_size();
  for (int i = 0; i < this->frames_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->frames(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientBeaconBatch_ClientBeaconRecord_AppErrorData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClientBeaconBatch_ClientBeaconRecord_AppErrorData*>(&from));
}

void ClientBeaconBatch_ClientBeaconRecord_AppErrorData::MergeFrom(const ClientBeaconBatch_ClientBeaconRecord_AppErrorData& from) {
  GOOGLE_CHECK_NE(&from, this);
  events_.MergeFrom(from.events_);
  frames_.MergeFrom(from.frames_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_functionname()) {
      set_functionname(from.functionname());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_linenumber()) {
      set_linenumber(from.linenumber());
    }
    if (from.has_columnnumber()) {
      set_columnnumber(from.columnnumber());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_classname()) {
      set_classname(from.classname());
    }
    if (from.has_stack()) {
      set_stack(from.stack());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_extra()) {
      set_extra(from.extra());
    }
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_via()) {
      set_via(from.via());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ClientBeaconBatch_ClientBeaconRecord_AppErrorData::CopyFrom(const ClientBeaconBatch_ClientBeaconRecord_AppErrorData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientBeaconBatch_ClientBeaconRecord_AppErrorData::IsInitialized() const {

  return true;
}

void ClientBeaconBatch_ClientBeaconRecord_AppErrorData::Swap(ClientBeaconBatch_ClientBeaconRecord_AppErrorData* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(code_, other->code_);
    std::swap(message_, other->message_);
    std::swap(functionname_, other->functionname_);
    std::swap(filename_, other->filename_);
    std::swap(linenumber_, other->linenumber_);
    std::swap(columnnumber_, other->columnnumber_);
    std::swap(classname_, other->classname_);
    std::swap(stack_, other->stack_);
    std::swap(type_, other->type_);
    std::swap(extra_, other->extra_);
    std::swap(source_, other->source_);
    std::swap(via_, other->via_);
    events_.Swap(&other->events_);
    frames_.Swap(&other->frames_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ClientBeaconBatch_ClientBeaconRecord_AppErrorData::GetTypeName() const {
  return "client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppErrorData";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ClientBeaconBatch_ClientBeaconRecord::kTimestampFieldNumber;
const int ClientBeaconBatch_ClientBeaconRecord::kBeaconTypeFieldNumber;
const int ClientBeaconBatch_ClientBeaconRecord::kPageGroupFieldNumber;
const int ClientBeaconBatch_ClientBeaconRecord::kAbTestFieldNumber;
const int ClientBeaconBatch_ClientBeaconRecord::kCustomDimensionsFieldNumber;
const int ClientBeaconBatch_ClientBeaconRecord::kApiNetworkRequestDataFieldNumber;
const int ClientBeaconBatch_ClientBeaconRecord::kApiCustomTimerDataFieldNumber;
const int ClientBeaconBatch_ClientBeaconRecord::kApiCustomMetricDataFieldNumber;
const int ClientBeaconBatch_ClientBeaconRecord::kAppLaunchDataFieldNumber;
const int ClientBeaconBatch_ClientBeaconRecord::kAppInactiveDataFieldNumber;
const int ClientBeaconBatch_ClientBeaconRecord::kAppErrorDataFieldNumber;
#endif  // !_MSC_VER

ClientBeaconBatch_ClientBeaconRecord::ClientBeaconBatch_ClientBeaconRecord()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord)
}

void ClientBeaconBatch_ClientBeaconRecord::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  api_network_request_data_ = const_cast< ::client_beacon_batch::ClientBeaconBatch_ClientBeaconRecord_ApiNetworkRequestData*>(
      ::client_beacon_batch::ClientBeaconBatch_ClientBeaconRecord_ApiNetworkRequestData::internal_default_instance());
#else
  api_network_request_data_ = const_cast< ::client_beacon_batch::ClientBeaconBatch_ClientBeaconRecord_ApiNetworkRequestData*>(&::client_beacon_batch::ClientBeaconBatch_ClientBeaconRecord_ApiNetworkRequestData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  api_custom_timer_data_ = const_cast< ::client_beacon_batch::ClientBeaconBatch_ClientBeaconRecord_ApiCustomTimerData*>(
      ::client_beacon_batch::ClientBeaconBatch_ClientBeaconRecord_ApiCustomTimerData::internal_default_instance());
#else
  api_custom_timer_data_ = const_cast< ::client_beacon_batch::ClientBeaconBatch_ClientBeaconRecord_ApiCustomTimerData*>(&::client_beacon_batch::ClientBeaconBatch_ClientBeaconRecord_ApiCustomTimerData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  api_custom_metric_data_ = const_cast< ::client_beacon_batch::ClientBeaconBatch_ClientBeaconRecord_ApiCustomMetricData*>(
      ::client_beacon_batch::ClientBeaconBatch_ClientBeaconRecord_ApiCustomMetricData::internal_default_instance());
#else
  api_custom_metric_data_ = const_cast< ::client_beacon_batch::ClientBeaconBatch_ClientBeaconRecord_ApiCustomMetricData*>(&::client_beacon_batch::ClientBeaconBatch_ClientBeaconRecord_ApiCustomMetricData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  app_launch_data_ = const_cast< ::client_beacon_batch::ClientBeaconBatch_ClientBeaconRecord_AppLaunchData*>(
      ::client_beacon_batch::ClientBeaconBatch_ClientBeaconRecord_AppLaunchData::internal_default_instance());
#else
  app_launch_data_ = const_cast< ::client_beacon_batch::ClientBeaconBatch_ClientBeaconRecord_AppLaunchData*>(&::client_beacon_batch::ClientBeaconBatch_ClientBeaconRecord_AppLaunchData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  app_inactive_data_ = const_cast< ::client_beacon_batch::ClientBeaconBatch_ClientBeaconRecord_AppInactiveData*>(
      ::client_beacon_batch::ClientBeaconBatch_ClientBeaconRecord_AppInactiveData::internal_default_instance());
#else
  app_inactive_data_ = const_cast< ::client_beacon_batch::ClientBeaconBatch_ClientBeaconRecord_AppInactiveData*>(&::client_beacon_batch::ClientBeaconBatch_ClientBeaconRecord_AppInactiveData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  app_error_data_ = const_cast< ::client_beacon_batch::ClientBeaconBatch_ClientBeaconRecord_AppErrorData*>(
      ::client_beacon_batch::ClientBeaconBatch_ClientBeaconRecord_AppErrorData::internal_default_instance());
#else
  app_error_data_ = const_cast< ::client_beacon_batch::ClientBeaconBatch_ClientBeaconRecord_AppErrorData*>(&::client_beacon_batch::ClientBeaconBatch_ClientBeaconRecord_AppErrorData::default_instance());
#endif
}

ClientBeaconBatch_ClientBeaconRecord::ClientBeaconBatch_ClientBeaconRecord(const ClientBeaconBatch_ClientBeaconRecord& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord)
}

void ClientBeaconBatch_ClientBeaconRecord::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  beacon_type_ = 0;
  page_group_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ab_test_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  api_network_request_data_ = NULL;
  api_custom_timer_data_ = NULL;
  api_custom_metric_data_ = NULL;
  app_launch_data_ = NULL;
  app_inactive_data_ = NULL;
  app_error_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientBeaconBatch_ClientBeaconRecord::~ClientBeaconBatch_ClientBeaconRecord() {
  // @@protoc_insertion_point(destructor:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord)
  SharedDtor();
}

void ClientBeaconBatch_ClientBeaconRecord::SharedDtor() {
  if (page_group_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete page_group_;
  }
  if (ab_test_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ab_test_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete api_network_request_data_;
    delete api_custom_timer_data_;
    delete api_custom_metric_data_;
    delete app_launch_data_;
    delete app_inactive_data_;
    delete app_error_data_;
  }
}

void ClientBeaconBatch_ClientBeaconRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClientBeaconBatch_ClientBeaconRecord& ClientBeaconBatch_ClientBeaconRecord::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ClientBeaconBatch_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ClientBeaconBatch_2eproto();
#endif
  return *default_instance_;
}

ClientBeaconBatch_ClientBeaconRecord* ClientBeaconBatch_ClientBeaconRecord::default_instance_ = NULL;

ClientBeaconBatch_ClientBeaconRecord* ClientBeaconBatch_ClientBeaconRecord::New() const {
  return new ClientBeaconBatch_ClientBeaconRecord;
}

void ClientBeaconBatch_ClientBeaconRecord::Clear() {
  if (_has_bits_[0 / 32] & 239) {
    timestamp_ = GOOGLE_LONGLONG(0);
    beacon_type_ = 0;
    if (has_page_group()) {
      if (page_group_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        page_group_->clear();
      }
    }
    if (has_ab_test()) {
      if (ab_test_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ab_test_->clear();
      }
    }
    if (has_api_network_request_data()) {
      if (api_network_request_data_ != NULL) api_network_request_data_->::client_beacon_batch::ClientBeaconBatch_ClientBeaconRecord_ApiNetworkRequestData::Clear();
    }
    if (has_api_custom_timer_data()) {
      if (api_custom_timer_data_ != NULL) api_custom_timer_data_->::client_beacon_batch::ClientBeaconBatch_ClientBeaconRecord_ApiCustomTimerData::Clear();
    }
    if (has_api_custom_metric_data()) {
      if (api_custom_metric_data_ != NULL) api_custom_metric_data_->::client_beacon_batch::ClientBeaconBatch_ClientBeaconRecord_ApiCustomMetricData::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 1792) {
    if (has_app_launch_data()) {
      if (app_launch_data_ != NULL) app_launch_data_->::client_beacon_batch::ClientBeaconBatch_ClientBeaconRecord_AppLaunchData::Clear();
    }
    if (has_app_inactive_data()) {
      if (app_inactive_data_ != NULL) app_inactive_data_->::client_beacon_batch::ClientBeaconBatch_ClientBeaconRecord_AppInactiveData::Clear();
    }
    if (has_app_error_data()) {
      if (app_error_data_ != NULL) app_error_data_->::client_beacon_batch::ClientBeaconBatch_ClientBeaconRecord_AppErrorData::Clear();
    }
  }
  custom_dimensions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ClientBeaconBatch_ClientBeaconRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_beacon_type;
        break;
      }

      // optional .client_beacon_batch.ClientBeaconBatch.BeaconType beacon_type = 2;
      case 2: {
        if (tag == 16) {
         parse_beacon_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_beacon_batch::ClientBeaconBatch_BeaconType_IsValid(value)) {
            set_beacon_type(static_cast< ::client_beacon_batch::ClientBeaconBatch_BeaconType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_page_group;
        break;
      }

      // optional string page_group = 3;
      case 3: {
        if (tag == 26) {
         parse_page_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_group()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ab_test;
        break;
      }

      // optional string ab_test = 4;
      case 4: {
        if (tag == 34) {
         parse_ab_test:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ab_test()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_custom_dimensions;
        break;
      }

      // repeated string custom_dimensions = 5;
      case 5: {
        if (tag == 42) {
         parse_custom_dimensions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_custom_dimensions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_custom_dimensions;
        if (input->ExpectTag(50)) goto parse_api_network_request_data;
        break;
      }

      // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.ApiNetworkRequestData api_network_request_data = 6;
      case 6: {
        if (tag == 50) {
         parse_api_network_request_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_api_network_request_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_api_custom_timer_data;
        break;
      }

      // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.ApiCustomTimerData api_custom_timer_data = 7;
      case 7: {
        if (tag == 58) {
         parse_api_custom_timer_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_api_custom_timer_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_api_custom_metric_data;
        break;
      }

      // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.ApiCustomMetricData api_custom_metric_data = 8;
      case 8: {
        if (tag == 66) {
         parse_api_custom_metric_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_api_custom_metric_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_app_launch_data;
        break;
      }

      // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppLaunchData app_launch_data = 9;
      case 9: {
        if (tag == 74) {
         parse_app_launch_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_app_launch_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_app_inactive_data;
        break;
      }

      // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppInactiveData app_inactive_data = 10;
      case 10: {
        if (tag == 82) {
         parse_app_inactive_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_app_inactive_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_app_error_data;
        break;
      }

      // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppErrorData app_error_data = 11;
      case 11: {
        if (tag == 90) {
         parse_app_error_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_app_error_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord)
  return false;
#undef DO_
}

void ClientBeaconBatch_ClientBeaconRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord)
  // optional int64 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // optional .client_beacon_batch.ClientBeaconBatch.BeaconType beacon_type = 2;
  if (has_beacon_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->beacon_type(), output);
  }

  // optional string page_group = 3;
  if (has_page_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->page_group(), output);
  }

  // optional string ab_test = 4;
  if (has_ab_test()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->ab_test(), output);
  }

  // repeated string custom_dimensions = 5;
  for (int i = 0; i < this->custom_dimensions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->custom_dimensions(i), output);
  }

  // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.ApiNetworkRequestData api_network_request_data = 6;
  if (has_api_network_request_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->api_network_request_data(), output);
  }

  // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.ApiCustomTimerData api_custom_timer_data = 7;
  if (has_api_custom_timer_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->api_custom_timer_data(), output);
  }

  // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.ApiCustomMetricData api_custom_metric_data = 8;
  if (has_api_custom_metric_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->api_custom_metric_data(), output);
  }

  // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppLaunchData app_launch_data = 9;
  if (has_app_launch_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->app_launch_data(), output);
  }

  // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppInactiveData app_inactive_data = 10;
  if (has_app_inactive_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->app_inactive_data(), output);
  }

  // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppErrorData app_error_data = 11;
  if (has_app_error_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->app_error_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord)
}

int ClientBeaconBatch_ClientBeaconRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional .client_beacon_batch.ClientBeaconBatch.BeaconType beacon_type = 2;
    if (has_beacon_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->beacon_type());
    }

    // optional string page_group = 3;
    if (has_page_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->page_group());
    }

    // optional string ab_test = 4;
    if (has_ab_test()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ab_test());
    }

    // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.ApiNetworkRequestData api_network_request_data = 6;
    if (has_api_network_request_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->api_network_request_data());
    }

    // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.ApiCustomTimerData api_custom_timer_data = 7;
    if (has_api_custom_timer_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->api_custom_timer_data());
    }

    // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.ApiCustomMetricData api_custom_metric_data = 8;
    if (has_api_custom_metric_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->api_custom_metric_data());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppLaunchData app_launch_data = 9;
    if (has_app_launch_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->app_launch_data());
    }

    // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppInactiveData app_inactive_data = 10;
    if (has_app_inactive_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->app_inactive_data());
    }

    // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord.AppErrorData app_error_data = 11;
    if (has_app_error_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->app_error_data());
    }

  }
  // repeated string custom_dimensions = 5;
  total_size += 1 * this->custom_dimensions_size();
  for (int i = 0; i < this->custom_dimensions_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->custom_dimensions(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientBeaconBatch_ClientBeaconRecord::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClientBeaconBatch_ClientBeaconRecord*>(&from));
}

void ClientBeaconBatch_ClientBeaconRecord::MergeFrom(const ClientBeaconBatch_ClientBeaconRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  custom_dimensions_.MergeFrom(from.custom_dimensions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_beacon_type()) {
      set_beacon_type(from.beacon_type());
    }
    if (from.has_page_group()) {
      set_page_group(from.page_group());
    }
    if (from.has_ab_test()) {
      set_ab_test(from.ab_test());
    }
    if (from.has_api_network_request_data()) {
      mutable_api_network_request_data()->::client_beacon_batch::ClientBeaconBatch_ClientBeaconRecord_ApiNetworkRequestData::MergeFrom(from.api_network_request_data());
    }
    if (from.has_api_custom_timer_data()) {
      mutable_api_custom_timer_data()->::client_beacon_batch::ClientBeaconBatch_ClientBeaconRecord_ApiCustomTimerData::MergeFrom(from.api_custom_timer_data());
    }
    if (from.has_api_custom_metric_data()) {
      mutable_api_custom_metric_data()->::client_beacon_batch::ClientBeaconBatch_ClientBeaconRecord_ApiCustomMetricData::MergeFrom(from.api_custom_metric_data());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_app_launch_data()) {
      mutable_app_launch_data()->::client_beacon_batch::ClientBeaconBatch_ClientBeaconRecord_AppLaunchData::MergeFrom(from.app_launch_data());
    }
    if (from.has_app_inactive_data()) {
      mutable_app_inactive_data()->::client_beacon_batch::ClientBeaconBatch_ClientBeaconRecord_AppInactiveData::MergeFrom(from.app_inactive_data());
    }
    if (from.has_app_error_data()) {
      mutable_app_error_data()->::client_beacon_batch::ClientBeaconBatch_ClientBeaconRecord_AppErrorData::MergeFrom(from.app_error_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ClientBeaconBatch_ClientBeaconRecord::CopyFrom(const ClientBeaconBatch_ClientBeaconRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientBeaconBatch_ClientBeaconRecord::IsInitialized() const {

  return true;
}

void ClientBeaconBatch_ClientBeaconRecord::Swap(ClientBeaconBatch_ClientBeaconRecord* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(beacon_type_, other->beacon_type_);
    std::swap(page_group_, other->page_group_);
    std::swap(ab_test_, other->ab_test_);
    custom_dimensions_.Swap(&other->custom_dimensions_);
    std::swap(api_network_request_data_, other->api_network_request_data_);
    std::swap(api_custom_timer_data_, other->api_custom_timer_data_);
    std::swap(api_custom_metric_data_, other->api_custom_metric_data_);
    std::swap(app_launch_data_, other->app_launch_data_);
    std::swap(app_inactive_data_, other->app_inactive_data_);
    std::swap(app_error_data_, other->app_error_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ClientBeaconBatch_ClientBeaconRecord::GetTypeName() const {
  return "client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ClientBeaconBatch_SessionInfo::kIdFieldNumber;
const int ClientBeaconBatch_SessionInfo::kStartTimeFieldNumber;
const int ClientBeaconBatch_SessionInfo::kEndTimeFieldNumber;
const int ClientBeaconBatch_SessionInfo::kNetworkRequestCountTotalFieldNumber;
const int ClientBeaconBatch_SessionInfo::kNetworkRequestDurationTotalFieldNumber;
#endif  // !_MSC_VER

ClientBeaconBatch_SessionInfo::ClientBeaconBatch_SessionInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_beacon_batch.ClientBeaconBatch.SessionInfo)
}

void ClientBeaconBatch_SessionInfo::InitAsDefaultInstance() {
}

ClientBeaconBatch_SessionInfo::ClientBeaconBatch_SessionInfo(const ClientBeaconBatch_SessionInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_beacon_batch.ClientBeaconBatch.SessionInfo)
}

void ClientBeaconBatch_SessionInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_time_ = GOOGLE_LONGLONG(0);
  end_time_ = GOOGLE_LONGLONG(0);
  network_request_count_total_ = 0;
  network_request_duration_total_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientBeaconBatch_SessionInfo::~ClientBeaconBatch_SessionInfo() {
  // @@protoc_insertion_point(destructor:client_beacon_batch.ClientBeaconBatch.SessionInfo)
  SharedDtor();
}

void ClientBeaconBatch_SessionInfo::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ClientBeaconBatch_SessionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClientBeaconBatch_SessionInfo& ClientBeaconBatch_SessionInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ClientBeaconBatch_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ClientBeaconBatch_2eproto();
#endif
  return *default_instance_;
}

ClientBeaconBatch_SessionInfo* ClientBeaconBatch_SessionInfo::default_instance_ = NULL;

ClientBeaconBatch_SessionInfo* ClientBeaconBatch_SessionInfo::New() const {
  return new ClientBeaconBatch_SessionInfo;
}

void ClientBeaconBatch_SessionInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClientBeaconBatch_SessionInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(start_time_, network_request_count_total_);
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ClientBeaconBatch_SessionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:client_beacon_batch.ClientBeaconBatch.SessionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_start_time;
        break;
      }

      // optional int64 start_time = 2;
      case 2: {
        if (tag == 16) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_end_time;
        break;
      }

      // optional int64 end_time = 3;
      case 3: {
        if (tag == 24) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_network_request_count_total;
        break;
      }

      // optional int32 network_request_count_total = 4;
      case 4: {
        if (tag == 32) {
         parse_network_request_count_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &network_request_count_total_)));
          set_has_network_request_count_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_network_request_duration_total;
        break;
      }

      // optional int64 network_request_duration_total = 5;
      case 5: {
        if (tag == 40) {
         parse_network_request_duration_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &network_request_duration_total_)));
          set_has_network_request_duration_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_beacon_batch.ClientBeaconBatch.SessionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_beacon_batch.ClientBeaconBatch.SessionInfo)
  return false;
#undef DO_
}

void ClientBeaconBatch_SessionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_beacon_batch.ClientBeaconBatch.SessionInfo)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional int64 start_time = 2;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->start_time(), output);
  }

  // optional int64 end_time = 3;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->end_time(), output);
  }

  // optional int32 network_request_count_total = 4;
  if (has_network_request_count_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->network_request_count_total(), output);
  }

  // optional int64 network_request_duration_total = 5;
  if (has_network_request_duration_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->network_request_duration_total(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:client_beacon_batch.ClientBeaconBatch.SessionInfo)
}

int ClientBeaconBatch_SessionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional int64 start_time = 2;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_time());
    }

    // optional int64 end_time = 3;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end_time());
    }

    // optional int32 network_request_count_total = 4;
    if (has_network_request_count_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->network_request_count_total());
    }

    // optional int64 network_request_duration_total = 5;
    if (has_network_request_duration_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->network_request_duration_total());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientBeaconBatch_SessionInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClientBeaconBatch_SessionInfo*>(&from));
}

void ClientBeaconBatch_SessionInfo::MergeFrom(const ClientBeaconBatch_SessionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_network_request_count_total()) {
      set_network_request_count_total(from.network_request_count_total());
    }
    if (from.has_network_request_duration_total()) {
      set_network_request_duration_total(from.network_request_duration_total());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ClientBeaconBatch_SessionInfo::CopyFrom(const ClientBeaconBatch_SessionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientBeaconBatch_SessionInfo::IsInitialized() const {

  return true;
}

void ClientBeaconBatch_SessionInfo::Swap(ClientBeaconBatch_SessionInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(network_request_count_total_, other->network_request_count_total_);
    std::swap(network_request_duration_total_, other->network_request_duration_total_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ClientBeaconBatch_SessionInfo::GetTypeName() const {
  return "client_beacon_batch.ClientBeaconBatch.SessionInfo";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ClientBeaconBatch::kBoomerangVersionFieldNumber;
const int ClientBeaconBatch::kDomainFieldNumber;
const int ClientBeaconBatch::kApiKeyFieldNumber;
const int ClientBeaconBatch::kDeviceFieldNumber;
const int ClientBeaconBatch::kManufacturerFieldNumber;
const int ClientBeaconBatch::kTypeFieldNumber;
const int ClientBeaconBatch::kOsFieldNumber;
const int ClientBeaconBatch::kIspFieldNumber;
const int ClientBeaconBatch::kConnectionTypeFieldNumber;
const int ClientBeaconBatch::kSiteVersionFieldNumber;
const int ClientBeaconBatch::kLatitudeFieldNumber;
const int ClientBeaconBatch::kLongitudeFieldNumber;
const int ClientBeaconBatch::kSessionFieldNumber;
const int ClientBeaconBatch::kRecordsFieldNumber;
const int ClientBeaconBatch::kBeaconRecordsFieldNumber;
#endif  // !_MSC_VER

ClientBeaconBatch::ClientBeaconBatch()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client_beacon_batch.ClientBeaconBatch)
}

void ClientBeaconBatch::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  session_ = const_cast< ::client_beacon_batch::ClientBeaconBatch_SessionInfo*>(
      ::client_beacon_batch::ClientBeaconBatch_SessionInfo::internal_default_instance());
#else
  session_ = const_cast< ::client_beacon_batch::ClientBeaconBatch_SessionInfo*>(&::client_beacon_batch::ClientBeaconBatch_SessionInfo::default_instance());
#endif
}

ClientBeaconBatch::ClientBeaconBatch(const ClientBeaconBatch& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client_beacon_batch.ClientBeaconBatch)
}

void ClientBeaconBatch::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  boomerang_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  api_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manufacturer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  connection_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  site_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  latitude_ = 0;
  longitude_ = 0;
  session_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientBeaconBatch::~ClientBeaconBatch() {
  // @@protoc_insertion_point(destructor:client_beacon_batch.ClientBeaconBatch)
  SharedDtor();
}

void ClientBeaconBatch::SharedDtor() {
  if (boomerang_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete boomerang_version_;
  }
  if (domain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete domain_;
  }
  if (api_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete api_key_;
  }
  if (device_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete device_;
  }
  if (manufacturer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete manufacturer_;
  }
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (os_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete os_;
  }
  if (isp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete isp_;
  }
  if (connection_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete connection_type_;
  }
  if (site_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete site_version_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete session_;
  }
}

void ClientBeaconBatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClientBeaconBatch& ClientBeaconBatch::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ClientBeaconBatch_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ClientBeaconBatch_2eproto();
#endif
  return *default_instance_;
}

ClientBeaconBatch* ClientBeaconBatch::default_instance_ = NULL;

ClientBeaconBatch* ClientBeaconBatch::New() const {
  return new ClientBeaconBatch;
}

void ClientBeaconBatch::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClientBeaconBatch*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    if (has_boomerang_version()) {
      if (boomerang_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        boomerang_version_->clear();
      }
    }
    if (has_domain()) {
      if (domain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        domain_->clear();
      }
    }
    if (has_api_key()) {
      if (api_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        api_key_->clear();
      }
    }
    if (has_device()) {
      if (device_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        device_->clear();
      }
    }
    if (has_manufacturer()) {
      if (manufacturer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        manufacturer_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
    if (has_os()) {
      if (os_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        os_->clear();
      }
    }
    if (has_isp()) {
      if (isp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        isp_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(latitude_, longitude_);
    if (has_connection_type()) {
      if (connection_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        connection_type_->clear();
      }
    }
    if (has_site_version()) {
      if (site_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        site_version_->clear();
      }
    }
    if (has_session()) {
      if (session_ != NULL) session_->::client_beacon_batch::ClientBeaconBatch_SessionInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  records_.Clear();
  beacon_records_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ClientBeaconBatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:client_beacon_batch.ClientBeaconBatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string boomerang_version = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_boomerang_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_domain;
        break;
      }

      // optional string domain = 2;
      case 2: {
        if (tag == 18) {
         parse_domain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_api_key;
        break;
      }

      // optional string api_key = 3;
      case 3: {
        if (tag == 26) {
         parse_api_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_api_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_device;
        break;
      }

      // optional string device = 4;
      case 4: {
        if (tag == 34) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_manufacturer;
        break;
      }

      // optional string manufacturer = 5;
      case 5: {
        if (tag == 42) {
         parse_manufacturer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manufacturer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_type;
        break;
      }

      // optional string type = 6;
      case 6: {
        if (tag == 50) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_os;
        break;
      }

      // optional string os = 7;
      case 7: {
        if (tag == 58) {
         parse_os:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_isp;
        break;
      }

      // optional string isp = 8;
      case 8: {
        if (tag == 66) {
         parse_isp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_isp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_connection_type;
        break;
      }

      // optional string connection_type = 9;
      case 9: {
        if (tag == 74) {
         parse_connection_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connection_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_site_version;
        break;
      }

      // optional string site_version = 10;
      case 10: {
        if (tag == 82) {
         parse_site_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_site_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_latitude;
        break;
      }

      // optional float latitude = 11;
      case 11: {
        if (tag == 93) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_longitude;
        break;
      }

      // optional float longitude = 12;
      case 12: {
        if (tag == 101) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_session;
        break;
      }

      // optional .client_beacon_batch.ClientBeaconBatch.SessionInfo session = 13;
      case 13: {
        if (tag == 106) {
         parse_session:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_records;
        break;
      }

      // repeated .client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord records = 14;
      case 14: {
        if (tag == 114) {
         parse_records:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_records()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_records;
        if (input->ExpectTag(122)) goto parse_beacon_records;
        break;
      }

      // repeated .client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord beacon_records = 15;
      case 15: {
        if (tag == 122) {
         parse_beacon_records:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_beacon_records()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_beacon_records;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client_beacon_batch.ClientBeaconBatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client_beacon_batch.ClientBeaconBatch)
  return false;
#undef DO_
}

void ClientBeaconBatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client_beacon_batch.ClientBeaconBatch)
  // optional string boomerang_version = 1;
  if (has_boomerang_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->boomerang_version(), output);
  }

  // optional string domain = 2;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->domain(), output);
  }

  // optional string api_key = 3;
  if (has_api_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->api_key(), output);
  }

  // optional string device = 4;
  if (has_device()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->device(), output);
  }

  // optional string manufacturer = 5;
  if (has_manufacturer()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->manufacturer(), output);
  }

  // optional string type = 6;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->type(), output);
  }

  // optional string os = 7;
  if (has_os()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->os(), output);
  }

  // optional string isp = 8;
  if (has_isp()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->isp(), output);
  }

  // optional string connection_type = 9;
  if (has_connection_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->connection_type(), output);
  }

  // optional string site_version = 10;
  if (has_site_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->site_version(), output);
  }

  // optional float latitude = 11;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->latitude(), output);
  }

  // optional float longitude = 12;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->longitude(), output);
  }

  // optional .client_beacon_batch.ClientBeaconBatch.SessionInfo session = 13;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, this->session(), output);
  }

  // repeated .client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord records = 14;
  for (int i = 0; i < this->records_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, this->records(i), output);
  }

  // repeated .client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord beacon_records = 15;
  for (int i = 0; i < this->beacon_records_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15, this->beacon_records(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:client_beacon_batch.ClientBeaconBatch)
}

int ClientBeaconBatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string boomerang_version = 1;
    if (has_boomerang_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->boomerang_version());
    }

    // optional string domain = 2;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain());
    }

    // optional string api_key = 3;
    if (has_api_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->api_key());
    }

    // optional string device = 4;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device());
    }

    // optional string manufacturer = 5;
    if (has_manufacturer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->manufacturer());
    }

    // optional string type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string os = 7;
    if (has_os()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os());
    }

    // optional string isp = 8;
    if (has_isp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->isp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string connection_type = 9;
    if (has_connection_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->connection_type());
    }

    // optional string site_version = 10;
    if (has_site_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->site_version());
    }

    // optional float latitude = 11;
    if (has_latitude()) {
      total_size += 1 + 4;
    }

    // optional float longitude = 12;
    if (has_longitude()) {
      total_size += 1 + 4;
    }

    // optional .client_beacon_batch.ClientBeaconBatch.SessionInfo session = 13;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session());
    }

  }
  // repeated .client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord records = 14;
  total_size += 1 * this->records_size();
  for (int i = 0; i < this->records_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->records(i));
  }

  // repeated .client_beacon_batch.ClientBeaconBatch.ClientBeaconRecord beacon_records = 15;
  total_size += 1 * this->beacon_records_size();
  for (int i = 0; i < this->beacon_records_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->beacon_records(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientBeaconBatch::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClientBeaconBatch*>(&from));
}

void ClientBeaconBatch::MergeFrom(const ClientBeaconBatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  records_.MergeFrom(from.records_);
  beacon_records_.MergeFrom(from.beacon_records_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_boomerang_version()) {
      set_boomerang_version(from.boomerang_version());
    }
    if (from.has_domain()) {
      set_domain(from.domain());
    }
    if (from.has_api_key()) {
      set_api_key(from.api_key());
    }
    if (from.has_device()) {
      set_device(from.device());
    }
    if (from.has_manufacturer()) {
      set_manufacturer(from.manufacturer());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_os()) {
      set_os(from.os());
    }
    if (from.has_isp()) {
      set_isp(from.isp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_connection_type()) {
      set_connection_type(from.connection_type());
    }
    if (from.has_site_version()) {
      set_site_version(from.site_version());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_session()) {
      mutable_session()->::client_beacon_batch::ClientBeaconBatch_SessionInfo::MergeFrom(from.session());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ClientBeaconBatch::CopyFrom(const ClientBeaconBatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientBeaconBatch::IsInitialized() const {

  return true;
}

void ClientBeaconBatch::Swap(ClientBeaconBatch* other) {
  if (other != this) {
    std::swap(boomerang_version_, other->boomerang_version_);
    std::swap(domain_, other->domain_);
    std::swap(api_key_, other->api_key_);
    std::swap(device_, other->device_);
    std::swap(manufacturer_, other->manufacturer_);
    std::swap(type_, other->type_);
    std::swap(os_, other->os_);
    std::swap(isp_, other->isp_);
    std::swap(connection_type_, other->connection_type_);
    std::swap(site_version_, other->site_version_);
    std::swap(latitude_, other->latitude_);
    std::swap(longitude_, other->longitude_);
    std::swap(session_, other->session_);
    records_.Swap(&other->records_);
    beacon_records_.Swap(&other->beacon_records_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ClientBeaconBatch::GetTypeName() const {
  return "client_beacon_batch.ClientBeaconBatch";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client_beacon_batch

// @@protoc_insertion_point(global_scope)
