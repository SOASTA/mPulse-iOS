// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientBeaconBatch.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ClientBeaconBatch.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace client_beacon_batch {

void protobuf_ShutdownFile_ClientBeaconBatch_2eproto() {
  delete ClientBeaconBatch::default_instance_;
  delete ClientBeaconBatch_ClientBeaconBatchRecord::default_instance_;
  delete ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::default_instance_;
  delete ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::default_instance_;
  delete ClientBeaconBatch_SessionInfo::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_ClientBeaconBatch_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_ClientBeaconBatch_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ClientBeaconBatch::default_instance_ = new ClientBeaconBatch();
  ClientBeaconBatch_ClientBeaconBatchRecord::default_instance_ = new ClientBeaconBatch_ClientBeaconBatchRecord();
  ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::default_instance_ = new ClientBeaconBatch_ClientBeaconBatchRecord_TimerData();
  ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::default_instance_ = new ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers();
  ClientBeaconBatch_SessionInfo::default_instance_ = new ClientBeaconBatch_SessionInfo();
  ClientBeaconBatch::default_instance_->InitAsDefaultInstance();
  ClientBeaconBatch_ClientBeaconBatchRecord::default_instance_->InitAsDefaultInstance();
  ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::default_instance_->InitAsDefaultInstance();
  ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::default_instance_->InitAsDefaultInstance();
  ClientBeaconBatch_SessionInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ClientBeaconBatch_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_ClientBeaconBatch_2eproto_once_);
void protobuf_AddDesc_ClientBeaconBatch_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_ClientBeaconBatch_2eproto_once_,
                 &protobuf_AddDesc_ClientBeaconBatch_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ClientBeaconBatch_2eproto {
  StaticDescriptorInitializer_ClientBeaconBatch_2eproto() {
    protobuf_AddDesc_ClientBeaconBatch_2eproto();
  }
} static_descriptor_initializer_ClientBeaconBatch_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::kTotalFieldNumber;
const int ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::kMinFieldNumber;
const int ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::kMaxFieldNumber;
const int ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::kSumFieldNumber;
const int ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::kSumSqFieldNumber;
const int ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::kHistogramFieldNumber;
#endif  // !_MSC_VER

ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::InitAsDefaultInstance() {
}

ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData(const ClientBeaconBatch_ClientBeaconBatchRecord_TimerData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::SharedCtor() {
  _cached_size_ = 0;
  total_ = 0;
  min_ = 0;
  max_ = 0;
  sum_ = GOOGLE_LONGLONG(0);
  sum_sq_ = GOOGLE_LONGLONG(0);
  histogram_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::~ClientBeaconBatch_ClientBeaconBatchRecord_TimerData() {
  SharedDtor();
}

void ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::SharedDtor() {
  if (histogram_ != &::google::protobuf::internal::kEmptyString) {
    delete histogram_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClientBeaconBatch_ClientBeaconBatchRecord_TimerData& ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ClientBeaconBatch_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ClientBeaconBatch_2eproto();
#endif
  return *default_instance_;
}

ClientBeaconBatch_ClientBeaconBatchRecord_TimerData* ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::default_instance_ = NULL;

ClientBeaconBatch_ClientBeaconBatchRecord_TimerData* ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::New() const {
  return new ClientBeaconBatch_ClientBeaconBatchRecord_TimerData;
}

void ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    total_ = 0;
    min_ = 0;
    max_ = 0;
    sum_ = GOOGLE_LONGLONG(0);
    sum_sq_ = GOOGLE_LONGLONG(0);
    if (has_histogram()) {
      if (histogram_ != &::google::protobuf::internal::kEmptyString) {
        histogram_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 total = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_)));
          set_has_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_min;
        break;
      }

      // optional int32 min = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_)));
          set_has_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_max;
        break;
      }

      // optional int32 max = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_)));
          set_has_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sum;
        break;
      }

      // optional int64 sum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sum_)));
          set_has_sum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sum_sq;
        break;
      }

      // optional int64 sum_sq = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sum_sq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sum_sq_)));
          set_has_sum_sq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_histogram;
        break;
      }

      // optional bytes histogram = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_histogram:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_histogram()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 total = 1;
  if (has_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->total(), output);
  }

  // optional int32 min = 2;
  if (has_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->min(), output);
  }

  // optional int32 max = 3;
  if (has_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max(), output);
  }

  // optional int64 sum = 4;
  if (has_sum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->sum(), output);
  }

  // optional int64 sum_sq = 5;
  if (has_sum_sq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->sum_sq(), output);
  }

  // optional bytes histogram = 6;
  if (has_histogram()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->histogram(), output);
  }

}

int ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 total = 1;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total());
    }

    // optional int32 min = 2;
    if (has_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min());
    }

    // optional int32 max = 3;
    if (has_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max());
    }

    // optional int64 sum = 4;
    if (has_sum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sum());
    }

    // optional int64 sum_sq = 5;
    if (has_sum_sq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sum_sq());
    }

    // optional bytes histogram = 6;
    if (has_histogram()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->histogram());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClientBeaconBatch_ClientBeaconBatchRecord_TimerData*>(&from));
}

void ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::MergeFrom(const ClientBeaconBatch_ClientBeaconBatchRecord_TimerData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total()) {
      set_total(from.total());
    }
    if (from.has_min()) {
      set_min(from.min());
    }
    if (from.has_max()) {
      set_max(from.max());
    }
    if (from.has_sum()) {
      set_sum(from.sum());
    }
    if (from.has_sum_sq()) {
      set_sum_sq(from.sum_sq());
    }
    if (from.has_histogram()) {
      set_histogram(from.histogram());
    }
  }
}

void ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::CopyFrom(const ClientBeaconBatch_ClientBeaconBatchRecord_TimerData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::IsInitialized() const {

  return true;
}

void ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::Swap(ClientBeaconBatch_ClientBeaconBatchRecord_TimerData* other) {
  if (other != this) {
    std::swap(total_, other->total_);
    std::swap(min_, other->min_);
    std::swap(max_, other->max_);
    std::swap(sum_, other->sum_);
    std::swap(sum_sq_, other->sum_sq_);
    std::swap(histogram_, other->histogram_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::GetTypeName() const {
  return "client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.TimerData";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::kRequestDurationTimerFieldNumber;
const int ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::kDnsTimerFieldNumber;
const int ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::kTcpTimerFieldNumber;
const int ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::kSslTimerFieldNumber;
const int ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::kTimeToFirstByteTimerFieldNumber;
const int ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::kTimeToLastByteTimerFieldNumber;
#endif  // !_MSC_VER

ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  request_duration_timer_ = const_cast< ::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData*>(
      ::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::internal_default_instance());
#else
  request_duration_timer_ = const_cast< ::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData*>(&::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  dns_timer_ = const_cast< ::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData*>(
      ::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::internal_default_instance());
#else
  dns_timer_ = const_cast< ::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData*>(&::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  tcp_timer_ = const_cast< ::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData*>(
      ::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::internal_default_instance());
#else
  tcp_timer_ = const_cast< ::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData*>(&::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  ssl_timer_ = const_cast< ::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData*>(
      ::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::internal_default_instance());
#else
  ssl_timer_ = const_cast< ::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData*>(&::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  time_to_first_byte_timer_ = const_cast< ::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData*>(
      ::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::internal_default_instance());
#else
  time_to_first_byte_timer_ = const_cast< ::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData*>(&::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  time_to_last_byte_timer_ = const_cast< ::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData*>(
      ::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::internal_default_instance());
#else
  time_to_last_byte_timer_ = const_cast< ::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData*>(&::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::default_instance());
#endif
}

ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers(const ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::SharedCtor() {
  _cached_size_ = 0;
  request_duration_timer_ = NULL;
  dns_timer_ = NULL;
  tcp_timer_ = NULL;
  ssl_timer_ = NULL;
  time_to_first_byte_timer_ = NULL;
  time_to_last_byte_timer_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::~ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers() {
  SharedDtor();
}

void ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete request_duration_timer_;
    delete dns_timer_;
    delete tcp_timer_;
    delete ssl_timer_;
    delete time_to_first_byte_timer_;
    delete time_to_last_byte_timer_;
  }
}

void ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers& ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ClientBeaconBatch_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ClientBeaconBatch_2eproto();
#endif
  return *default_instance_;
}

ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers* ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::default_instance_ = NULL;

ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers* ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::New() const {
  return new ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers;
}

void ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request_duration_timer()) {
      if (request_duration_timer_ != NULL) request_duration_timer_->::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::Clear();
    }
    if (has_dns_timer()) {
      if (dns_timer_ != NULL) dns_timer_->::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::Clear();
    }
    if (has_tcp_timer()) {
      if (tcp_timer_ != NULL) tcp_timer_->::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::Clear();
    }
    if (has_ssl_timer()) {
      if (ssl_timer_ != NULL) ssl_timer_->::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::Clear();
    }
    if (has_time_to_first_byte_timer()) {
      if (time_to_first_byte_timer_ != NULL) time_to_first_byte_timer_->::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::Clear();
    }
    if (has_time_to_last_byte_timer()) {
      if (time_to_last_byte_timer_ != NULL) time_to_last_byte_timer_->::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.TimerData request_duration_timer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request_duration_timer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dns_timer;
        break;
      }

      // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.TimerData dns_timer = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dns_timer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dns_timer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tcp_timer;
        break;
      }

      // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.TimerData tcp_timer = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tcp_timer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tcp_timer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ssl_timer;
        break;
      }

      // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.TimerData ssl_timer = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ssl_timer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ssl_timer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_time_to_first_byte_timer;
        break;
      }

      // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.TimerData time_to_first_byte_timer = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_time_to_first_byte_timer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time_to_first_byte_timer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_time_to_last_byte_timer;
        break;
      }

      // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.TimerData time_to_last_byte_timer = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_time_to_last_byte_timer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time_to_last_byte_timer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.TimerData request_duration_timer = 1;
  if (has_request_duration_timer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->request_duration_timer(), output);
  }

  // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.TimerData dns_timer = 2;
  if (has_dns_timer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->dns_timer(), output);
  }

  // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.TimerData tcp_timer = 3;
  if (has_tcp_timer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->tcp_timer(), output);
  }

  // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.TimerData ssl_timer = 4;
  if (has_ssl_timer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->ssl_timer(), output);
  }

  // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.TimerData time_to_first_byte_timer = 5;
  if (has_time_to_first_byte_timer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->time_to_first_byte_timer(), output);
  }

  // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.TimerData time_to_last_byte_timer = 6;
  if (has_time_to_last_byte_timer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->time_to_last_byte_timer(), output);
  }

}

int ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.TimerData request_duration_timer = 1;
    if (has_request_duration_timer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request_duration_timer());
    }

    // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.TimerData dns_timer = 2;
    if (has_dns_timer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dns_timer());
    }

    // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.TimerData tcp_timer = 3;
    if (has_tcp_timer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tcp_timer());
    }

    // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.TimerData ssl_timer = 4;
    if (has_ssl_timer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ssl_timer());
    }

    // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.TimerData time_to_first_byte_timer = 5;
    if (has_time_to_first_byte_timer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->time_to_first_byte_timer());
    }

    // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.TimerData time_to_last_byte_timer = 6;
    if (has_time_to_last_byte_timer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->time_to_last_byte_timer());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers*>(&from));
}

void ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::MergeFrom(const ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_duration_timer()) {
      mutable_request_duration_timer()->::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::MergeFrom(from.request_duration_timer());
    }
    if (from.has_dns_timer()) {
      mutable_dns_timer()->::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::MergeFrom(from.dns_timer());
    }
    if (from.has_tcp_timer()) {
      mutable_tcp_timer()->::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::MergeFrom(from.tcp_timer());
    }
    if (from.has_ssl_timer()) {
      mutable_ssl_timer()->::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::MergeFrom(from.ssl_timer());
    }
    if (from.has_time_to_first_byte_timer()) {
      mutable_time_to_first_byte_timer()->::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::MergeFrom(from.time_to_first_byte_timer());
    }
    if (from.has_time_to_last_byte_timer()) {
      mutable_time_to_last_byte_timer()->::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_TimerData::MergeFrom(from.time_to_last_byte_timer());
    }
  }
}

void ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::CopyFrom(const ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::IsInitialized() const {

  return true;
}

void ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::Swap(ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers* other) {
  if (other != this) {
    std::swap(request_duration_timer_, other->request_duration_timer_);
    std::swap(dns_timer_, other->dns_timer_);
    std::swap(tcp_timer_, other->tcp_timer_);
    std::swap(ssl_timer_, other->ssl_timer_);
    std::swap(time_to_first_byte_timer_, other->time_to_first_byte_timer_);
    std::swap(time_to_last_byte_timer_, other->time_to_last_byte_timer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::GetTypeName() const {
  return "client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.NetworkTimers";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ClientBeaconBatch_ClientBeaconBatchRecord::kPageGroupFieldNumber;
const int ClientBeaconBatch_ClientBeaconBatchRecord::kAbTestFieldNumber;
const int ClientBeaconBatch_ClientBeaconBatchRecord::kUrlFieldNumber;
const int ClientBeaconBatch_ClientBeaconBatchRecord::kNetworkErrorCodeFieldNumber;
const int ClientBeaconBatch_ClientBeaconBatchRecord::kTimestampFieldNumber;
const int ClientBeaconBatch_ClientBeaconBatchRecord::kNetworkTimersFieldNumber;
const int ClientBeaconBatch_ClientBeaconBatchRecord::kCustomTimersFieldNumber;
const int ClientBeaconBatch_ClientBeaconBatchRecord::kCustomMetricsFieldNumber;
const int ClientBeaconBatch_ClientBeaconBatchRecord::kBeaconTotalFieldNumber;
const int ClientBeaconBatch_ClientBeaconBatchRecord::kCrashesTotalFieldNumber;
const int ClientBeaconBatch_ClientBeaconBatchRecord::kInstallsTotalFieldNumber;
const int ClientBeaconBatch_ClientBeaconBatchRecord::kCustomDimensionsFieldNumber;
const int ClientBeaconBatch_ClientBeaconBatchRecord::kBeaconTypeFieldNumber;
#endif  // !_MSC_VER

ClientBeaconBatch_ClientBeaconBatchRecord::ClientBeaconBatch_ClientBeaconBatchRecord()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ClientBeaconBatch_ClientBeaconBatchRecord::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  network_timers_ = const_cast< ::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers*>(
      ::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::internal_default_instance());
#else
  network_timers_ = const_cast< ::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers*>(&::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::default_instance());
#endif
}

ClientBeaconBatch_ClientBeaconBatchRecord::ClientBeaconBatch_ClientBeaconBatchRecord(const ClientBeaconBatch_ClientBeaconBatchRecord& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ClientBeaconBatch_ClientBeaconBatchRecord::SharedCtor() {
  _cached_size_ = 0;
  page_group_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ab_test_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  network_error_code_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  network_timers_ = NULL;
  beacon_total_ = 0;
  crashes_total_ = 0;
  installs_total_ = 0;
  beacon_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientBeaconBatch_ClientBeaconBatchRecord::~ClientBeaconBatch_ClientBeaconBatchRecord() {
  SharedDtor();
}

void ClientBeaconBatch_ClientBeaconBatchRecord::SharedDtor() {
  if (page_group_ != &::google::protobuf::internal::kEmptyString) {
    delete page_group_;
  }
  if (ab_test_ != &::google::protobuf::internal::kEmptyString) {
    delete ab_test_;
  }
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (beacon_type_ != &::google::protobuf::internal::kEmptyString) {
    delete beacon_type_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete network_timers_;
  }
}

void ClientBeaconBatch_ClientBeaconBatchRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClientBeaconBatch_ClientBeaconBatchRecord& ClientBeaconBatch_ClientBeaconBatchRecord::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ClientBeaconBatch_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ClientBeaconBatch_2eproto();
#endif
  return *default_instance_;
}

ClientBeaconBatch_ClientBeaconBatchRecord* ClientBeaconBatch_ClientBeaconBatchRecord::default_instance_ = NULL;

ClientBeaconBatch_ClientBeaconBatchRecord* ClientBeaconBatch_ClientBeaconBatchRecord::New() const {
  return new ClientBeaconBatch_ClientBeaconBatchRecord;
}

void ClientBeaconBatch_ClientBeaconBatchRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_page_group()) {
      if (page_group_ != &::google::protobuf::internal::kEmptyString) {
        page_group_->clear();
      }
    }
    if (has_ab_test()) {
      if (ab_test_ != &::google::protobuf::internal::kEmptyString) {
        ab_test_->clear();
      }
    }
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
    network_error_code_ = 0;
    timestamp_ = GOOGLE_LONGLONG(0);
    if (has_network_timers()) {
      if (network_timers_ != NULL) network_timers_->::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    beacon_total_ = 0;
    crashes_total_ = 0;
    installs_total_ = 0;
    if (has_beacon_type()) {
      if (beacon_type_ != &::google::protobuf::internal::kEmptyString) {
        beacon_type_->clear();
      }
    }
  }
  custom_timers_.Clear();
  custom_metrics_.Clear();
  custom_dimensions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ClientBeaconBatch_ClientBeaconBatchRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string page_group = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_group()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ab_test;
        break;
      }

      // optional string ab_test = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ab_test:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ab_test()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_url;
        break;
      }

      // optional string url = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_network_error_code;
        break;
      }

      // optional int32 network_error_code = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_network_error_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &network_error_code_)));
          set_has_network_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_timestamp;
        break;
      }

      // optional int64 timestamp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_network_timers;
        break;
      }

      // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.NetworkTimers network_timers = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_network_timers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_network_timers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_custom_timers;
        break;
      }

      // repeated .client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.TimerData custom_timers = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_custom_timers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_custom_timers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_custom_timers;
        if (input->ExpectTag(64)) goto parse_custom_metrics;
        break;
      }

      // repeated int64 custom_metrics = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_custom_metrics:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 64, input, this->mutable_custom_metrics())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_custom_metrics())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_custom_metrics;
        if (input->ExpectTag(72)) goto parse_beacon_total;
        break;
      }

      // optional int32 beacon_total = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beacon_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &beacon_total_)));
          set_has_beacon_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_crashes_total;
        break;
      }

      // optional int32 crashes_total = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crashes_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crashes_total_)));
          set_has_crashes_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_installs_total;
        break;
      }

      // optional int32 installs_total = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_installs_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &installs_total_)));
          set_has_installs_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_custom_dimensions;
        break;
      }

      // repeated string custom_dimensions = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_custom_dimensions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_custom_dimensions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_custom_dimensions;
        if (input->ExpectTag(106)) goto parse_beacon_type;
        break;
      }

      // optional string beacon_type = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_beacon_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_beacon_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientBeaconBatch_ClientBeaconBatchRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string page_group = 1;
  if (has_page_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->page_group(), output);
  }

  // optional string ab_test = 2;
  if (has_ab_test()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ab_test(), output);
  }

  // optional string url = 3;
  if (has_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->url(), output);
  }

  // optional int32 network_error_code = 4;
  if (has_network_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->network_error_code(), output);
  }

  // optional int64 timestamp = 5;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->timestamp(), output);
  }

  // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.NetworkTimers network_timers = 6;
  if (has_network_timers()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->network_timers(), output);
  }

  // repeated .client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.TimerData custom_timers = 7;
  for (int i = 0; i < this->custom_timers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->custom_timers(i), output);
  }

  // repeated int64 custom_metrics = 8;
  for (int i = 0; i < this->custom_metrics_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      8, this->custom_metrics(i), output);
  }

  // optional int32 beacon_total = 9;
  if (has_beacon_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->beacon_total(), output);
  }

  // optional int32 crashes_total = 10;
  if (has_crashes_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->crashes_total(), output);
  }

  // optional int32 installs_total = 11;
  if (has_installs_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->installs_total(), output);
  }

  // repeated string custom_dimensions = 12;
  for (int i = 0; i < this->custom_dimensions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->custom_dimensions(i), output);
  }

  // optional string beacon_type = 13;
  if (has_beacon_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->beacon_type(), output);
  }

}

int ClientBeaconBatch_ClientBeaconBatchRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string page_group = 1;
    if (has_page_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->page_group());
    }

    // optional string ab_test = 2;
    if (has_ab_test()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ab_test());
    }

    // optional string url = 3;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional int32 network_error_code = 4;
    if (has_network_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->network_error_code());
    }

    // optional int64 timestamp = 5;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional .client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.NetworkTimers network_timers = 6;
    if (has_network_timers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->network_timers());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 beacon_total = 9;
    if (has_beacon_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->beacon_total());
    }

    // optional int32 crashes_total = 10;
    if (has_crashes_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->crashes_total());
    }

    // optional int32 installs_total = 11;
    if (has_installs_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->installs_total());
    }

    // optional string beacon_type = 13;
    if (has_beacon_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->beacon_type());
    }

  }
  // repeated .client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord.TimerData custom_timers = 7;
  total_size += 1 * this->custom_timers_size();
  for (int i = 0; i < this->custom_timers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->custom_timers(i));
  }

  // repeated int64 custom_metrics = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->custom_metrics_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->custom_metrics(i));
    }
    total_size += 1 * this->custom_metrics_size() + data_size;
  }

  // repeated string custom_dimensions = 12;
  total_size += 1 * this->custom_dimensions_size();
  for (int i = 0; i < this->custom_dimensions_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->custom_dimensions(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientBeaconBatch_ClientBeaconBatchRecord::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClientBeaconBatch_ClientBeaconBatchRecord*>(&from));
}

void ClientBeaconBatch_ClientBeaconBatchRecord::MergeFrom(const ClientBeaconBatch_ClientBeaconBatchRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  custom_timers_.MergeFrom(from.custom_timers_);
  custom_metrics_.MergeFrom(from.custom_metrics_);
  custom_dimensions_.MergeFrom(from.custom_dimensions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_page_group()) {
      set_page_group(from.page_group());
    }
    if (from.has_ab_test()) {
      set_ab_test(from.ab_test());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_network_error_code()) {
      set_network_error_code(from.network_error_code());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_network_timers()) {
      mutable_network_timers()->::client_beacon_batch::ClientBeaconBatch_ClientBeaconBatchRecord_NetworkTimers::MergeFrom(from.network_timers());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_beacon_total()) {
      set_beacon_total(from.beacon_total());
    }
    if (from.has_crashes_total()) {
      set_crashes_total(from.crashes_total());
    }
    if (from.has_installs_total()) {
      set_installs_total(from.installs_total());
    }
    if (from.has_beacon_type()) {
      set_beacon_type(from.beacon_type());
    }
  }
}

void ClientBeaconBatch_ClientBeaconBatchRecord::CopyFrom(const ClientBeaconBatch_ClientBeaconBatchRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientBeaconBatch_ClientBeaconBatchRecord::IsInitialized() const {

  return true;
}

void ClientBeaconBatch_ClientBeaconBatchRecord::Swap(ClientBeaconBatch_ClientBeaconBatchRecord* other) {
  if (other != this) {
    std::swap(page_group_, other->page_group_);
    std::swap(ab_test_, other->ab_test_);
    std::swap(url_, other->url_);
    std::swap(network_error_code_, other->network_error_code_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(network_timers_, other->network_timers_);
    custom_timers_.Swap(&other->custom_timers_);
    custom_metrics_.Swap(&other->custom_metrics_);
    std::swap(beacon_total_, other->beacon_total_);
    std::swap(crashes_total_, other->crashes_total_);
    std::swap(installs_total_, other->installs_total_);
    custom_dimensions_.Swap(&other->custom_dimensions_);
    std::swap(beacon_type_, other->beacon_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ClientBeaconBatch_ClientBeaconBatchRecord::GetTypeName() const {
  return "client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ClientBeaconBatch_SessionInfo::kIdFieldNumber;
const int ClientBeaconBatch_SessionInfo::kStartTimeFieldNumber;
const int ClientBeaconBatch_SessionInfo::kEndTimeFieldNumber;
const int ClientBeaconBatch_SessionInfo::kNetworkRequestCountTotalFieldNumber;
const int ClientBeaconBatch_SessionInfo::kNetworkRequestDurationTotalFieldNumber;
#endif  // !_MSC_VER

ClientBeaconBatch_SessionInfo::ClientBeaconBatch_SessionInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ClientBeaconBatch_SessionInfo::InitAsDefaultInstance() {
}

ClientBeaconBatch_SessionInfo::ClientBeaconBatch_SessionInfo(const ClientBeaconBatch_SessionInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ClientBeaconBatch_SessionInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  start_time_ = GOOGLE_LONGLONG(0);
  end_time_ = GOOGLE_LONGLONG(0);
  network_request_count_total_ = 0;
  network_request_duration_total_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientBeaconBatch_SessionInfo::~ClientBeaconBatch_SessionInfo() {
  SharedDtor();
}

void ClientBeaconBatch_SessionInfo::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ClientBeaconBatch_SessionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClientBeaconBatch_SessionInfo& ClientBeaconBatch_SessionInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ClientBeaconBatch_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ClientBeaconBatch_2eproto();
#endif
  return *default_instance_;
}

ClientBeaconBatch_SessionInfo* ClientBeaconBatch_SessionInfo::default_instance_ = NULL;

ClientBeaconBatch_SessionInfo* ClientBeaconBatch_SessionInfo::New() const {
  return new ClientBeaconBatch_SessionInfo;
}

void ClientBeaconBatch_SessionInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    start_time_ = GOOGLE_LONGLONG(0);
    end_time_ = GOOGLE_LONGLONG(0);
    network_request_count_total_ = 0;
    network_request_duration_total_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ClientBeaconBatch_SessionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_start_time;
        break;
      }

      // optional int64 start_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_end_time;
        break;
      }

      // optional int64 end_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_network_request_count_total;
        break;
      }

      // optional int32 network_request_count_total = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_network_request_count_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &network_request_count_total_)));
          set_has_network_request_count_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_network_request_duration_total;
        break;
      }

      // optional int64 network_request_duration_total = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_network_request_duration_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &network_request_duration_total_)));
          set_has_network_request_duration_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientBeaconBatch_SessionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // optional int64 start_time = 2;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->start_time(), output);
  }

  // optional int64 end_time = 3;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->end_time(), output);
  }

  // optional int32 network_request_count_total = 4;
  if (has_network_request_count_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->network_request_count_total(), output);
  }

  // optional int64 network_request_duration_total = 5;
  if (has_network_request_duration_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->network_request_duration_total(), output);
  }

}

int ClientBeaconBatch_SessionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional int64 start_time = 2;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_time());
    }

    // optional int64 end_time = 3;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end_time());
    }

    // optional int32 network_request_count_total = 4;
    if (has_network_request_count_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->network_request_count_total());
    }

    // optional int64 network_request_duration_total = 5;
    if (has_network_request_duration_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->network_request_duration_total());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientBeaconBatch_SessionInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClientBeaconBatch_SessionInfo*>(&from));
}

void ClientBeaconBatch_SessionInfo::MergeFrom(const ClientBeaconBatch_SessionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_network_request_count_total()) {
      set_network_request_count_total(from.network_request_count_total());
    }
    if (from.has_network_request_duration_total()) {
      set_network_request_duration_total(from.network_request_duration_total());
    }
  }
}

void ClientBeaconBatch_SessionInfo::CopyFrom(const ClientBeaconBatch_SessionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientBeaconBatch_SessionInfo::IsInitialized() const {

  return true;
}

void ClientBeaconBatch_SessionInfo::Swap(ClientBeaconBatch_SessionInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(network_request_count_total_, other->network_request_count_total_);
    std::swap(network_request_duration_total_, other->network_request_duration_total_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ClientBeaconBatch_SessionInfo::GetTypeName() const {
  return "client_beacon_batch.ClientBeaconBatch.SessionInfo";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ClientBeaconBatch::kBoomerangVersionFieldNumber;
const int ClientBeaconBatch::kDomainFieldNumber;
const int ClientBeaconBatch::kApiKeyFieldNumber;
const int ClientBeaconBatch::kDeviceFieldNumber;
const int ClientBeaconBatch::kManufacturerFieldNumber;
const int ClientBeaconBatch::kTypeFieldNumber;
const int ClientBeaconBatch::kOsFieldNumber;
const int ClientBeaconBatch::kIspFieldNumber;
const int ClientBeaconBatch::kConnectionTypeFieldNumber;
const int ClientBeaconBatch::kSiteVersionFieldNumber;
const int ClientBeaconBatch::kLatitudeFieldNumber;
const int ClientBeaconBatch::kLongitudeFieldNumber;
const int ClientBeaconBatch::kSessionFieldNumber;
const int ClientBeaconBatch::kRecordsFieldNumber;
#endif  // !_MSC_VER

ClientBeaconBatch::ClientBeaconBatch()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ClientBeaconBatch::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  session_ = const_cast< ::client_beacon_batch::ClientBeaconBatch_SessionInfo*>(
      ::client_beacon_batch::ClientBeaconBatch_SessionInfo::internal_default_instance());
#else
  session_ = const_cast< ::client_beacon_batch::ClientBeaconBatch_SessionInfo*>(&::client_beacon_batch::ClientBeaconBatch_SessionInfo::default_instance());
#endif
}

ClientBeaconBatch::ClientBeaconBatch(const ClientBeaconBatch& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ClientBeaconBatch::SharedCtor() {
  _cached_size_ = 0;
  boomerang_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  api_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  manufacturer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  os_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  connection_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  site_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  latitude_ = 0;
  longitude_ = 0;
  session_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientBeaconBatch::~ClientBeaconBatch() {
  SharedDtor();
}

void ClientBeaconBatch::SharedDtor() {
  if (boomerang_version_ != &::google::protobuf::internal::kEmptyString) {
    delete boomerang_version_;
  }
  if (domain_ != &::google::protobuf::internal::kEmptyString) {
    delete domain_;
  }
  if (api_key_ != &::google::protobuf::internal::kEmptyString) {
    delete api_key_;
  }
  if (device_ != &::google::protobuf::internal::kEmptyString) {
    delete device_;
  }
  if (manufacturer_ != &::google::protobuf::internal::kEmptyString) {
    delete manufacturer_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (os_ != &::google::protobuf::internal::kEmptyString) {
    delete os_;
  }
  if (isp_ != &::google::protobuf::internal::kEmptyString) {
    delete isp_;
  }
  if (connection_type_ != &::google::protobuf::internal::kEmptyString) {
    delete connection_type_;
  }
  if (site_version_ != &::google::protobuf::internal::kEmptyString) {
    delete site_version_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete session_;
  }
}

void ClientBeaconBatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClientBeaconBatch& ClientBeaconBatch::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ClientBeaconBatch_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ClientBeaconBatch_2eproto();
#endif
  return *default_instance_;
}

ClientBeaconBatch* ClientBeaconBatch::default_instance_ = NULL;

ClientBeaconBatch* ClientBeaconBatch::New() const {
  return new ClientBeaconBatch;
}

void ClientBeaconBatch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_boomerang_version()) {
      if (boomerang_version_ != &::google::protobuf::internal::kEmptyString) {
        boomerang_version_->clear();
      }
    }
    if (has_domain()) {
      if (domain_ != &::google::protobuf::internal::kEmptyString) {
        domain_->clear();
      }
    }
    if (has_api_key()) {
      if (api_key_ != &::google::protobuf::internal::kEmptyString) {
        api_key_->clear();
      }
    }
    if (has_device()) {
      if (device_ != &::google::protobuf::internal::kEmptyString) {
        device_->clear();
      }
    }
    if (has_manufacturer()) {
      if (manufacturer_ != &::google::protobuf::internal::kEmptyString) {
        manufacturer_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    if (has_os()) {
      if (os_ != &::google::protobuf::internal::kEmptyString) {
        os_->clear();
      }
    }
    if (has_isp()) {
      if (isp_ != &::google::protobuf::internal::kEmptyString) {
        isp_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_connection_type()) {
      if (connection_type_ != &::google::protobuf::internal::kEmptyString) {
        connection_type_->clear();
      }
    }
    if (has_site_version()) {
      if (site_version_ != &::google::protobuf::internal::kEmptyString) {
        site_version_->clear();
      }
    }
    latitude_ = 0;
    longitude_ = 0;
    if (has_session()) {
      if (session_ != NULL) session_->::client_beacon_batch::ClientBeaconBatch_SessionInfo::Clear();
    }
  }
  records_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ClientBeaconBatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string boomerang_version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_boomerang_version()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_domain;
        break;
      }

      // optional string domain = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_domain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_api_key;
        break;
      }

      // optional string api_key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_api_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_api_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_device;
        break;
      }

      // optional string device = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_manufacturer;
        break;
      }

      // optional string manufacturer = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_manufacturer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manufacturer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_type;
        break;
      }

      // optional string type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_os;
        break;
      }

      // optional string os = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_os:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_isp;
        break;
      }

      // optional string isp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_isp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_isp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_connection_type;
        break;
      }

      // optional string connection_type = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_connection_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connection_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_site_version;
        break;
      }

      // optional string site_version = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_site_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_site_version()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_latitude;
        break;
      }

      // optional float latitude = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_longitude;
        break;
      }

      // optional float longitude = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_session;
        break;
      }

      // optional .client_beacon_batch.ClientBeaconBatch.SessionInfo session = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_records;
        break;
      }

      // repeated .client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord records = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_records:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_records()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_records;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientBeaconBatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string boomerang_version = 1;
  if (has_boomerang_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->boomerang_version(), output);
  }

  // optional string domain = 2;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->domain(), output);
  }

  // optional string api_key = 3;
  if (has_api_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->api_key(), output);
  }

  // optional string device = 4;
  if (has_device()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->device(), output);
  }

  // optional string manufacturer = 5;
  if (has_manufacturer()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->manufacturer(), output);
  }

  // optional string type = 6;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->type(), output);
  }

  // optional string os = 7;
  if (has_os()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->os(), output);
  }

  // optional string isp = 8;
  if (has_isp()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->isp(), output);
  }

  // optional string connection_type = 9;
  if (has_connection_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->connection_type(), output);
  }

  // optional string site_version = 10;
  if (has_site_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->site_version(), output);
  }

  // optional float latitude = 11;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->latitude(), output);
  }

  // optional float longitude = 12;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->longitude(), output);
  }

  // optional .client_beacon_batch.ClientBeaconBatch.SessionInfo session = 13;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, this->session(), output);
  }

  // repeated .client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord records = 14;
  for (int i = 0; i < this->records_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, this->records(i), output);
  }

}

int ClientBeaconBatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string boomerang_version = 1;
    if (has_boomerang_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->boomerang_version());
    }

    // optional string domain = 2;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain());
    }

    // optional string api_key = 3;
    if (has_api_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->api_key());
    }

    // optional string device = 4;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device());
    }

    // optional string manufacturer = 5;
    if (has_manufacturer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->manufacturer());
    }

    // optional string type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string os = 7;
    if (has_os()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os());
    }

    // optional string isp = 8;
    if (has_isp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->isp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string connection_type = 9;
    if (has_connection_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->connection_type());
    }

    // optional string site_version = 10;
    if (has_site_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->site_version());
    }

    // optional float latitude = 11;
    if (has_latitude()) {
      total_size += 1 + 4;
    }

    // optional float longitude = 12;
    if (has_longitude()) {
      total_size += 1 + 4;
    }

    // optional .client_beacon_batch.ClientBeaconBatch.SessionInfo session = 13;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session());
    }

  }
  // repeated .client_beacon_batch.ClientBeaconBatch.ClientBeaconBatchRecord records = 14;
  total_size += 1 * this->records_size();
  for (int i = 0; i < this->records_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->records(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientBeaconBatch::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClientBeaconBatch*>(&from));
}

void ClientBeaconBatch::MergeFrom(const ClientBeaconBatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  records_.MergeFrom(from.records_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_boomerang_version()) {
      set_boomerang_version(from.boomerang_version());
    }
    if (from.has_domain()) {
      set_domain(from.domain());
    }
    if (from.has_api_key()) {
      set_api_key(from.api_key());
    }
    if (from.has_device()) {
      set_device(from.device());
    }
    if (from.has_manufacturer()) {
      set_manufacturer(from.manufacturer());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_os()) {
      set_os(from.os());
    }
    if (from.has_isp()) {
      set_isp(from.isp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_connection_type()) {
      set_connection_type(from.connection_type());
    }
    if (from.has_site_version()) {
      set_site_version(from.site_version());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_session()) {
      mutable_session()->::client_beacon_batch::ClientBeaconBatch_SessionInfo::MergeFrom(from.session());
    }
  }
}

void ClientBeaconBatch::CopyFrom(const ClientBeaconBatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientBeaconBatch::IsInitialized() const {

  return true;
}

void ClientBeaconBatch::Swap(ClientBeaconBatch* other) {
  if (other != this) {
    std::swap(boomerang_version_, other->boomerang_version_);
    std::swap(domain_, other->domain_);
    std::swap(api_key_, other->api_key_);
    std::swap(device_, other->device_);
    std::swap(manufacturer_, other->manufacturer_);
    std::swap(type_, other->type_);
    std::swap(os_, other->os_);
    std::swap(isp_, other->isp_);
    std::swap(connection_type_, other->connection_type_);
    std::swap(site_version_, other->site_version_);
    std::swap(latitude_, other->latitude_);
    std::swap(longitude_, other->longitude_);
    std::swap(session_, other->session_);
    records_.Swap(&other->records_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ClientBeaconBatch::GetTypeName() const {
  return "client_beacon_batch.ClientBeaconBatch";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client_beacon_batch

// @@protoc_insertion_point(global_scope)
